<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-03-28T17:53:58+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">NiklasJang’s Blog</title><subtitle>반갑습니다. niklas jang입니다.</subtitle><author><name>Niklas Jang</name></author><entry><title type="html">[PS][완전탐색][N자리 K진수] Chapter 2</title><link href="http://localhost:4000/ps/back-tracking-n-digit-k-decimal-2/" rel="alternate" type="text/html" title="[PS][완전탐색][N자리 K진수] Chapter 2" /><published>2020-03-23T00:00:00+09:00</published><updated>2020-03-23T00:00:00+09:00</updated><id>http://localhost:4000/ps/back-tracking-n-digit-k-decimal-2</id><content type="html" xml:base="http://localhost:4000/ps/back-tracking-n-digit-k-decimal-2/">&lt;p&gt;완전탐색의 첫 번째 알고리즘 백트래킹입니다. 백트래킹의 두 번째 유형인 ‘고른다/안고른다’를 학습합니다.&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;n자리-k진수--개념&quot;&gt;N자리 K진수 : 개념&lt;/h2&gt;

&lt;p&gt;이전 포스팅에서는 N자리 K진수에 대해서 각 자리수에 적절한 값을 재귀적으로 한 번씩 저장하는 방법을 사용했습니다. 오름차순 N자리 K진수를 구현할 때에 recur(int depth, int start)의 param을 적용했었습니다.&lt;/p&gt;

&lt;p&gt;이번에는 오름차순 N자리 K진수를 구현하기 위해서 특정값을 ‘선택한다/선택하지 않는다’의 방법을 적용해보겠습니다. 이 때 K는 [1,k]인 경우만 해당합니다.&lt;/p&gt;

&lt;p&gt;recur(int depth, int cnt)에 대해서 아래와 같은 의미를 갖습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;depth : 지금까지 선택한(배열에 저장된) 숫자의 갯수&lt;/li&gt;
  &lt;li&gt;cnt : 선택할지 말지 결정해야하는 수&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;//입력
3 6
//출력
1 2 3
1 2 4
1 2 5
1 2 6
1 3 4
1 3 5
1 3 6
1 4 5
1 4 6
1 5 6
2 3 4
2 3 5
2 3 6
2 4 5
2 4 6
2 5 6
3 4 5
3 4 6
3 5 6
4 5 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;오름차순 3자리 6진수들을 구할 때, arr[0]의 값이 1이 될 수도 있고 아닐 수도 있습니다. arr[0]값이 1로 선택되었을 때, arr[1]의 값이 2가 될 수도 있고 아닐 수도 있습니다. 이와 같은 방법으로 특정 값이 선택된다/선택되지 않는다.의 방법으로 N자리 K진수에 접근하는 방법입니다.&lt;/p&gt;

&lt;h2 id=&quot;n자리-k진수--코드&quot;&gt;N자리 K진수 : 코드&lt;/h2&gt;

&lt;p&gt;이를 코드로 구현하면 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//choice를 선택한다. &lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//choice를 선택하지 않는다.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_with_stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본적인 N자리 K진수와 큰 틀은 비슷합니다. 가장 처음에 choice는 1로 시작하고 오름차순으로 출력되어야하니 123부터 출력되어야 합니다. 따라서 choice를 선택하는 경우가 선택하지 않는 경우보다 먼저 실행됩니다. 현재의 choice를 선택하지 않는다는 것은 choice+n의 값이 들어갈 수 있음을 의미한다고 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;arr[0]의 값이 1로 선택된 경우(123 ~ 156)을 출력하고 arr[0]의 값이 2로 선택될지 말지를 결정해야합니다. 만약 arr[0]의 값이 2로 선택되는 경우 arr[0]의 값은 아직 저장되지 않았기 때문에 depth의 값이 0입니다. 따라서 arr[0]에 1이 저장되었던 것은 덮어써지기 때문에 고려하지 않아도 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;n자리-k진수--문제&quot;&gt;N자리 K진수 : 문제&lt;/h2&gt;

&lt;p&gt;이번에는 N자리 K진수를 선택한다/선택하지 않는다의 접근 방법으로 비내림차순 N자리 K진수를 출력해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//choice + 1을 choice로 바꾸면 비내림차순!&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_with_stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;//비내림차순 3자리 6진수
3 6
1 1 1 
1 1 2
1 1 3
1 1 4
1 1 5
1 1 6
1 2 2
1 2 3
1 2 4
1 2 5 
1 2 6
1 3 3
1 3 4
1 3 5
1 3 6
1 4 4
1 4 5
1 4 6
1 5 5
1 5 6
1 6 6
2 2 2
2 2 3
2 2 4
2 2 5
2 2 6
2 3 3
2 3 4
2 3 5
2 3 6
2 4 4
2 4 5
2 4 6
2 5 5 
2 5 6
2 6 6
3 3 3
3 3 4
3 3 5
3 3 6
3 4 4
3 4 5
3 4 6
3 5 5 
3 5 6
3 6 6
4 4 4
4 4 5
4 4 6
4 5 5
4 5 6
4 6 6
5 5 5
5 5 6
5 6 6
6 6 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;choice+1을 choice로 바꾸는 것의 의미는, arr[0]에서 1을 선택했을 때 arr[1]의 값을 다시 1이 선택될지 안될지를 결정하겠다는 의미입니다. 만약 arr[0]에서 1이 선택되지 않았다면 2의 선택여부를 결정해야하기 때문에 선택하지 않는 경우에는 그대로 choice+1을 둡니다.&lt;/p&gt;</content><author><name>Niklas Jang</name></author><category term="ps" /><category term="back-tracking" /><summary type="html">N자리 K진수 또 다른 접근 방법, 고른다/안고른다</summary></entry><entry><title type="html">[PS][완전탐색][DFS] Chapter 0</title><link href="http://localhost:4000/ps/dfs-0/" rel="alternate" type="text/html" title="[PS][완전탐색][DFS] Chapter 0" /><published>2020-03-23T00:00:00+09:00</published><updated>2020-03-23T00:00:00+09:00</updated><id>http://localhost:4000/ps/dfs-0</id><content type="html" xml:base="http://localhost:4000/ps/dfs-0/">&lt;p&gt;완전탐색의 두 번째 알고리즘 DFS 문제를 풀어보겠습니다.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;DFS는 개념은 생략하고 코드에서의 스킬을 학습하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;dfs--코드&quot;&gt;DFS : 코드&lt;/h2&gt;

&lt;h3 id=&quot;dfs--기본-코드&quot;&gt;DFS : 기본 코드&lt;/h3&gt;

&lt;p&gt;DFS의 기본 코드는 &lt;a href=&quot;https://gist.github.com/niklasjang/21305ecde4721d35062ce4a6d32473f3&quot;&gt;여기&lt;/a&gt;에서 확인할 수 있습니다. 일반적으로는 DFS를 하나의 노드에서 시작해서 갈 수 있는 마지막 노드까지 진행합니다.&lt;/p&gt;

&lt;h3 id=&quot;dfs--모든-dfs-경로&quot;&gt;DFS : 모든 DFS 경로&lt;/h3&gt;

&lt;p&gt;마지막 노드까지 진행하고 백트래킹 방식을 적용해서 또 다른 DFS 경로르 구하기 위해서는 visited[curr] = false;를 dfs()를 호출한 뒤 추가하면 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;dfs--dfs의-길이&quot;&gt;DFS : DFS의 길이&lt;/h3&gt;

&lt;p&gt;DFS의 길이를 구하는 방법은 두 가지를 제시합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;전역변수를 사용하는 방법은 &lt;a href=&quot;https://gist.github.com/niklasjang/67bbc7f7808ebeb22914a2fb5e01f001&quot;&gt;여기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;지역변수와 return을 사용하는 방법은 &lt;a href=&quot;https://gist.github.com/niklasjang/d7be98eb54923d96d687758fffad53a2&quot;&gt;여기&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;지역변수를 사용하는 방법에서 ans의 값이 1초 초기화되는 것은 dfs(curr)가 호출될 떄 curr 한 개는 최소 dfs의 요소로 포함되기 때문입니다.&lt;/p&gt;</content><author><name>Niklas Jang</name></author><category term="ps" /><category term="dfs" /><summary type="html">DFS 문제 익히기</summary></entry><entry><title type="html">[PS][완전탐색][N자리 K진수] Chapter 3</title><link href="http://localhost:4000/ps/back-tracking-n-digit-k-decimal-3/" rel="alternate" type="text/html" title="[PS][완전탐색][N자리 K진수] Chapter 3" /><published>2020-03-23T00:00:00+09:00</published><updated>2020-03-23T00:00:00+09:00</updated><id>http://localhost:4000/ps/back-tracking-n-digit-k-decimal-3</id><content type="html" xml:base="http://localhost:4000/ps/back-tracking-n-digit-k-decimal-3/">&lt;p&gt;완전탐색의 첫 번째 알고리즘 백트래킹 문제를 풀어보겠습니다.&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;n자리-k진수--문제&quot;&gt;N자리 K진수 : 문제&lt;/h2&gt;

&lt;h3 id=&quot;n-queen&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/9663&quot;&gt;N-Queen&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;코드는 &lt;a href=&quot;https://gist.github.com/niklasjang/2fa0b46c78e8fc831b019b807b261fd6&quot;&gt;여기&lt;/a&gt;에서 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;arr[0]=1을 map의 0번째 row에는 1번째 col에 퀸이 위치함을 의미합니다. 이 때 각 퀸들이 같은 row/col에는 올 수 없기 때문에 visited[]를 사용합니다. 그리고 isPossible()함수는 직접 8방향으로 시뮬레이션을 하느 것이 아니라, 좌표값의 차이를 통해서 서로의 대각선에 위치했는지 판별합니다.&lt;/p&gt;

&lt;h3 id=&quot;차이를-최대로&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/10819&quot;&gt;차이를 최대로&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;코드는 &lt;a href=&quot;https://gist.github.com/niklasjang/a5db9d774aad4b4e374902f42751c097&quot;&gt;여기&lt;/a&gt;에서 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이 문제는 기본적인 N자리 K진수 풀이로 가능합니다. N자리 K진수의 선택한다/선택하지 않는다의 풀이는 선택되는 index가 오름차순인 경우만 고려하기 때문에 적용할 수 없는 문제입니다.&lt;/p&gt;

&lt;h3 id=&quot;도영이가-만든-맛있는-음식&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2961&quot;&gt;도영이가 만든 맛있는 음식&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;코드는 &lt;a href=&quot;https://gist.github.com/niklasjang/6c4333c0fd360ad0d421847abf0e470f&quot;&gt;여기&lt;/a&gt;에서 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;특정 음식에 대해서는 그 음식을 사용하든 사용하지 않든 두 가지 경우만 존재합니다. 그런데 음식을 1개 이상 사용하는 경우 모두에 대해서 ans를 갱신해야합니다. recur(int depth)에서 depth는 ‘depth번째 선택을 해야하는 경우’임을 생각해서 depth != 0 인 경우를 제외하고는 모두 갱신을 해줍니다.&lt;/p&gt;

&lt;p&gt;오름차순으로 재료를 선택하기 때문에 가장 마지막 재료를 선택한 경우에는 choice를 사용한 덕분에 더이상 진행하지않고 recur이 종료됩니다.&lt;/p&gt;</content><author><name>Niklas Jang</name></author><category term="ps" /><category term="back-tracking" /><summary type="html">N자리 K진수 문제에 적용하기</summary></entry><entry><title type="html">[PS][완전탐색][N자리 K진수] Chapter 1</title><link href="http://localhost:4000/ps/back-tracking-n-digit-k-decimal-1/" rel="alternate" type="text/html" title="[PS][완전탐색][N자리 K진수] Chapter 1" /><published>2020-03-23T00:00:00+09:00</published><updated>2020-03-23T00:00:00+09:00</updated><id>http://localhost:4000/ps/back-tracking-n-digit-k-decimal-1</id><content type="html" xml:base="http://localhost:4000/ps/back-tracking-n-digit-k-decimal-1/">&lt;p&gt;완전탐색의 첫 번째 알고리즘 백트래킹입니다. 백트래킹의 첫 번째 유형인 N자리 K진수를 문제에 적용해보겠습니다.&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;n자리-k진수--문제&quot;&gt;N자리 K진수 : 문제&lt;/h2&gt;

&lt;h3 id=&quot;신기한-소수&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2023&quot;&gt;신기한 소수&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;N자리 K진수를 적용해서 해결하는 문제입니다. N자리 K진수의 개념은 그대로 적용되고 핵심은 두 가지 입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;isPrime()을 작성할 수 있는가? -&amp;gt; 소수인지 판별하는 O(sqrt(n)) 방법을 사용합니다.&lt;/li&gt;
  &lt;li&gt;isPrime()을 적절한 위치에서 사용할 수 있는가? -&amp;gt; recur()의 초입 부분에 적용해서 사용합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아래의 코드는 &lt;a href=&quot;https://gist.github.com/niklasjang/c06fbd3b76ae7a3e76cdc1811abd1d17&quot;&gt;여기&lt;/a&gt;에서도 볼 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//recur()의 초입 부분에 isPrime()을 적용한다. &lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//2671처럼 6이 들어가지만 소수일 수 있습니다. &lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_with_stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;암호-만들기&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1759&quot;&gt;암호 만들기&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;N자리 K진수를 적용해서 해결하는 문제입니다. 이 문제의 조건을 정리해보면 아래와 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;길이는 L&lt;/li&gt;
  &lt;li&gt;최소 한 개의 모음, 최소 두 개의 자음&lt;/li&gt;
  &lt;li&gt;알파벳이 증가하는 순서대로 정렬됨&lt;/li&gt;
  &lt;li&gt;C개의 암호가 주어질 때 이들로 만들 수 있는 암호 출력&lt;/li&gt;
  &lt;li&gt;문자 중복 선택 금지&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 문제는 C개의 문자로 길이 L의 순열을 만드는 L자리 C진수 문제로 생각할 수 있습니다. 문제의 조건을 지키도록 만드는 것이 중요합니다.&lt;/p&gt;

&lt;p&gt;개념 post에서 설명했던 start의 개념을 사용한 코드는 &lt;a href=&quot;https://gist.github.com/niklasjang/86df559d452480c05ff57d6f7212ff08&quot;&gt;여기&lt;/a&gt;에서 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;start를 param을 사용하지 않는 코드는 아래의 코드는 &lt;a href=&quot;https://gist.github.com/niklasjang/b499cd634c8c763d481de0aaed0c76a2&quot;&gt;여기&lt;/a&gt;에서도 볼 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;za&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mcnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zcnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mcnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zcnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'e'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'i'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'o'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'u'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mcnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zcnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mcnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zcnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_with_stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Niklas Jang</name></author><category term="ps" /><category term="back-tracking" /><summary type="html">N자리 K진수 문제에 적용하기</summary></entry><entry><title type="html">Github Jekyll Post Localhost에서 확인하기</title><link href="http://localhost:4000/guide/how-to-preview-post/" rel="alternate" type="text/html" title="Github Jekyll Post Localhost에서 확인하기" /><published>2020-03-22T00:00:00+09:00</published><updated>2020-03-22T00:00:00+09:00</updated><id>http://localhost:4000/guide/how-to-preview-post</id><content type="html" xml:base="http://localhost:4000/guide/how-to-preview-post/">&lt;ol&gt;
  &lt;li&gt;git clone https://github.com/niklasjang/niklasjang.github.io.git&lt;/li&gt;
  &lt;li&gt;cd niklasjang.github.io&lt;/li&gt;
  &lt;li&gt;bundle install&lt;/li&gt;
  &lt;li&gt;chcp 65001 //한글을 인코딩하기 위한 code pade 변경&lt;/li&gt;
  &lt;li&gt;local에서 post 작업&lt;/li&gt;
  &lt;li&gt;bundle exec jekyll serve&lt;/li&gt;
  &lt;li&gt;localhost:4000 접속 후 확인&lt;/li&gt;
  &lt;li&gt;remote에 올리는 경우 commit &amp;amp; push&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Niklas Jang</name></author><category term="guide" /></entry><entry><title type="html">[PS][완전탐색][N자리 K진수] Chapter 0</title><link href="http://localhost:4000/ps/back-tracking-n-digit-k-decimal-0/" rel="alternate" type="text/html" title="[PS][완전탐색][N자리 K진수] Chapter 0" /><published>2020-03-22T00:00:00+09:00</published><updated>2020-03-22T00:00:00+09:00</updated><id>http://localhost:4000/ps/back-tracking-n-digit-k-decimal-0</id><content type="html" xml:base="http://localhost:4000/ps/back-tracking-n-digit-k-decimal-0/">&lt;p&gt;완전탐색의 첫 번째 알고리즘 백트래킹입니다. 백트래킹의 첫 번째 유형인 N자리 K진수에 대해서 학습합니다.&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;백트래킹--개념&quot;&gt;백트래킹 : 개념&lt;/h2&gt;

&lt;p&gt;백트래킹은 완전탐색의 일부입니다. 정답이 될 수 있는 모든 가능성을 살펴보는데, 정답이 될 수 없는 경우가 나오면 더이상 진행하지 않습니다. 이때 처음으로 되돌아가지 않고 한 step만 뒤로가서 다시 모든 경우를 살펴보는 방법을 의미합니다.&lt;/p&gt;

&lt;h2 id=&quot;n자리-k진수--개념&quot;&gt;N자리 K진수 : 개념&lt;/h2&gt;

&lt;p&gt;길이가 N인 배열에 대해, 각 칸을 0~k-1로 채우는 모든 경우를 순회하는 경우를 의미합니다.&lt;/p&gt;

&lt;p&gt;Ex) 3자리  4진수&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;000
001
002
003
010
011
012
013
...
230
231
232
233
330
331
332
333
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;각 자리수에 대해서 0부터 k-1까지의 숫자라 순환되고 변경되는 자리수는 일의 자리 -&amp;gt; 십의 자리 -&amp;gt; 백의 자리 순서대로 진행됩니다. 코드를 작성할 때에는 재귀형태로 구현할 것이기 때문에 “백의 자리 0부터 k-1까지 순회한다. 이때 백의 자리가 저장될 때마다 십의 자리를 0부터 k-1까지 순회한다. 이때 십의 자리가 저장될 때마다 일의 자리를 0부터 k-1까지 순회한다.”고 할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;n자리-k진수--코드&quot;&gt;N자리 K진수 : 코드&lt;/h2&gt;

&lt;p&gt;이를 코드로 구현하면 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*기본적인 N자리 K진수*/&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//N:배열의 길이 , K: 진수&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//숫자가 저장될 배열&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*depth번째 index의 배열을 0부터 k-1까지 채운다. 0부터 n-1자리까지 모두 채워졌으면 출력한다.*/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//0부터 n-1자리까지 모두 채워진 경우&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//각 칸을 0부터 k-1까지 저장한다. &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//빠른 표준입력&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_with_stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//배열의 0번쨰 index부터 채우기 시작해야한다.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 N자리 K진수의 기본 코드는 통으로 외우는 것이 좋습니다. if 조건문을 사용해서 recur()이 끝나야하는 조건을 설정해줍니다. recur()을 호출하는 부분이 for문에 있기 때문에 if 조건문이 참이 되어 return;이 호출되었을 때 for문이 다시 실행됩니다.&lt;/p&gt;

&lt;p&gt;앞서 언급한 3자리 4진수의 경우&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;000
001
002
003
010
011
012
013
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;003 다음으로 010이 출력되는 과정을 생각해보겠습니다. 003을 출력한 것은 00이후에 2번 index에 0,1,2,3을 순서대로 채워넣었기 때문입니다. 003이 출력되고 return;이 호출되어 recur()이 종료합니다. 다음으로는 십의 자리에 1을 채우고 일의 자리에 0,1,2,3을 순서대로 채워넣습니다. 01까지 채우고 2번 index에 0을 넣을 때 이미 003에서의 3이 들어있을 것입니다. 이를 0,1,2,3 순서대로 덮어쓰면서 010,011,012,013이 출력됩니다.&lt;/p&gt;

&lt;h2 id=&quot;n자리-k진수--문제&quot;&gt;N자리 K진수 : 문제&lt;/h2&gt;

&lt;p&gt;N자리 K진수를 연습하는 대표적인 문제로는 &lt;a href=&quot;https://www.acmicpc.net/workbook/view/2052&quot;&gt;N과M&lt;/a&gt;이 있습니다. 1~12 중에서 1~8까지의 문제가 N자리 K진수를 연습하는 부분입니다. 설명과 이해의 편의를 위해서 3 - 1 - 2 - 4 - 7 - 5 - 6 - 8의 순서로 문제를 풀이하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;n과-m-3&quot;&gt;N과 M (3)&lt;/h3&gt;

&lt;p&gt;3번 문제는 가장 기본적인 N자리 K진수입니다. 문제의 조건을 정리하면 아래와 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;N자리 K진수&lt;/li&gt;
  &lt;li&gt;같은 수를 여러 번 골라도 된다.&lt;/li&gt;
  &lt;li&gt;중복되는 수열은 한 번만 출력한다.&lt;/li&gt;
  &lt;li&gt;각 수열은 공백으로 구분해서 출력한다.&lt;/li&gt;
  &lt;li&gt;사전 순으로 증가하는 순서로 출력한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3번 문제의 코드는 &lt;a href=&quot;https://gist.github.com/niklasjang/7a05fb4ff5be248ebd145bd8f5c4bc90&quot;&gt;여기&lt;/a&gt;에 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;n과-m-1&quot;&gt;N과 M (1)&lt;/h3&gt;

&lt;p&gt;1번 문제는 3번 문제와 한 가지 조건만 달라집니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;N자리 K진수&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;같은 수를 여러 번 골라도 된다.&lt;/del&gt; -&amp;gt; 같은 수를 여러 번 고르면 안된다.&lt;/li&gt;
  &lt;li&gt;중복되는 수열은 한 번만 출력한다.&lt;/li&gt;
  &lt;li&gt;각 수열은 공백으로 구분해서 출력한다.&lt;/li&gt;
  &lt;li&gt;사전 순으로 증가하는 순서로 출력한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;같은 수를 여러 번 고르지 않게 하기 위해서는 bool 타입의 visited 배열을 사용하는 것이 가장 편리합니다.&lt;/p&gt;

&lt;p&gt;1번 문제의 코드는 &lt;a href=&quot;https://gist.github.com/niklasjang/fdf53e26b64594cca15b878370916ee9&quot;&gt;여기&lt;/a&gt;에 있습니다.&lt;/p&gt;

&lt;p&gt;if(!visited[i])를 사용하는 것은 조건문을 통해서 실행되면 안되는 경우를 먼저 처리하기 위해서입니다. 그리고 recur(depth+1)를 호출한 뒤에 visited[i] = false;로 바꿔주는 부분을 주의해서 기억합니다.&lt;/p&gt;

&lt;h3 id=&quot;n과-m-2&quot;&gt;N과 M (2)&lt;/h3&gt;

&lt;p&gt;2번 문제는 3번 문제와 한 가지 조건만 달라집니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;N자리 K진수&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;같은 수를 여러 번 골라도 된다.&lt;/del&gt; -&amp;gt; 고른 수열은 오름차순이어야 한다.&lt;/li&gt;
  &lt;li&gt;중복되는 수열은 한 번만 출력한다.&lt;/li&gt;
  &lt;li&gt;각 수열은 공백으로 구분해서 출력한다.&lt;/li&gt;
  &lt;li&gt;사전 순으로 증가하는 순서로 출력한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2번 문제의 코드는 &lt;a href=&quot;https://gist.github.com/niklasjang/50013629c03ea86cbd070e135f2a379a&quot;&gt;여기&lt;/a&gt;에 있습니다.&lt;/p&gt;

&lt;p&gt;위 방법은 1번째 이상의 index에 대해서 조건문을 통해서 문제의 조건을 만족하는 방법입니다. 이전 인덱스보다 큰 값만 배열에 저장될 수 있도록 하는 것입니다.&lt;/p&gt;

&lt;p&gt;2번 문제에서 recur()의 param을 2개로 늘려서 푸는 방법은 &lt;a href=&quot;https://gist.github.com/niklasjang/601c51561f4fe1753767c5ee422bd321&quot;&gt;여기&lt;/a&gt;에 있습니다.&lt;/p&gt;

&lt;p&gt;위 방법은 start를 인자로 넘겨서 각 자리의 숫자라 start~k-1까지 저장될 수 있도록 합니다. 이 문제를 풀 때는 먼저 설명한 방법이 직관적일 수 있으나 문제 풀이의 방법 넓히는 것에 목적이 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;n과-m-4&quot;&gt;N과 M (4)&lt;/h3&gt;

&lt;p&gt;2번 문제는 3번 문제와 한 가지 조건만 달라집니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;N자리 K진수&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;같은 수를 여러 번 골라도 된다.&lt;/del&gt; -&amp;gt; 고른 수열은 비내림차순이어야 한다. 길이가 K인 수열 A가 A1 ≤ A2 ≤ … ≤ AK-1 ≤ AK를 만족하면, 비내림차순이라고 한다.&lt;/li&gt;
  &lt;li&gt;중복되는 수열은 한 번만 출력한다.&lt;/li&gt;
  &lt;li&gt;각 수열은 공백으로 구분해서 출력한다.&lt;/li&gt;
  &lt;li&gt;사전 순으로 증가하는 순서로 출력한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 방법은 2번 문제의 코드에서 한 가지만 변형하면 풀 수 있습니다. &lt;del&gt;recur(depth+1, i+1);&lt;/del&gt; -&amp;gt; recur(depth+1, i);&lt;/p&gt;

&lt;p&gt;이 문제의 코드는 &lt;a href=&quot;https://gist.github.com/niklasjang/2e1b4c3e66d4828f4f2e2af7a336098e&quot;&gt;여기&lt;/a&gt;에 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;n과-m-7&quot;&gt;N과 M (7)&lt;/h3&gt;

&lt;p&gt;7번 문제는 3번 문제와 한 가지 조건만 달라집니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;N자리 K진수&lt;/li&gt;
  &lt;li&gt;같은 수를 여러 번 골라도 된다. + 단, K진수가 아닌 주어지는 K개의 수만 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;중복되는 수열은 한 번만 출력한다.&lt;/li&gt;
  &lt;li&gt;각 수열은 공백으로 구분해서 출력한다.&lt;/li&gt;
  &lt;li&gt;사전 순으로 증가하는 순서로 출력한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;입력으로 주어지는 값들을 배열에 저장하고 sort()를 사용해서 오름차순으로 정렬한 뒤 사용하면 됩니다.&lt;/p&gt;

&lt;p&gt;이 문제의 코드는 &lt;a href=&quot;https://gist.github.com/niklasjang/5bcc97fe2a1ba1b41dd1f14c2e4ba1ba&quot;&gt;여기&lt;/a&gt;에 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;n과-m-5&quot;&gt;N과 M (5)&lt;/h3&gt;
&lt;h3 id=&quot;n과-m-6&quot;&gt;N과 M (6)&lt;/h3&gt;
&lt;h3 id=&quot;n과-m-8&quot;&gt;N과 M (8)&lt;/h3&gt;

&lt;p&gt;5,6,8번 문제도 7번 문제와 같이 앞서 풀이한 문제를 변형하여 N자리 K진수의 방법으로 해결할 수 있습니다.&lt;/p&gt;</content><author><name>Niklas Jang</name></author><category term="ps" /><category term="back-tracking" /><summary type="html">N자리 K진수 개념 이해하기</summary></entry><entry><title type="html">링크 정리</title><link href="http://localhost:4000/guide/useful-urls/" rel="alternate" type="text/html" title="링크 정리 " /><published>2020-03-20T00:00:00+09:00</published><updated>2020-03-20T00:00:00+09:00</updated><id>http://localhost:4000/guide/useful-urls</id><content type="html" xml:base="http://localhost:4000/guide/useful-urls/">&lt;h2 id=&quot;format&quot;&gt;Format&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;목적 : &lt;a href=&quot;&quot;&gt;링크&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;주의점&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;tips&quot;&gt;Tips&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;GCC Window 설치 : &lt;a href=&quot;https://sourceforge.net/projects/mingw/files/&quot;&gt;여기&lt;/a&gt;에서 초록색 버튼을 클릭하여 mingw-get-setup.exe 파일 다운로드&lt;/li&gt;
  &lt;li&gt;VSCode 개발 환경 설정 on Window (build/compile/run/Debug) : &lt;a href=&quot;https://code.visualstudio.com/docs/cpp/config-mingw&quot;&gt;여기&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;cwd path에 한글 안들어가도록 주의&lt;/li&gt;
      &lt;li&gt;vscode terminal에서 system evn path 적용안되면 vscode 재부팅&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Niklas Jang</name></author><category term="guide" /><summary type="html">유용한 링크들 정리</summary></entry><entry><title type="html">[열혈TCP/IP] 09 소켓의 다양한 옵션</title><link href="http://localhost:4000/ardenttcpip/chapter-9/" rel="alternate" type="text/html" title="[열혈TCP/IP] 09 소켓의 다양한 옵션" /><published>2020-01-13T00:00:00+09:00</published><updated>2020-01-13T00:00:00+09:00</updated><id>http://localhost:4000/ardenttcpip/chapter-9</id><content type="html" xml:base="http://localhost:4000/ardenttcpip/chapter-9/">&lt;h1 id=&quot;09-소켓의-다양한-옵션&quot;&gt;09 소켓의 다양한 옵션&lt;/h1&gt;

&lt;h2 id=&quot;09-1-소켓의-옵션과-입출력-버퍼의-크기&quot;&gt;09-1 소켓의 옵션과 입출력 버퍼의 크기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;소켓의 옵션은 계층별로 분류된다. 책 200페이지&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;getsockopt &amp;amp; setsockopt&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/socket.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getsockpot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/socket.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setsockpot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;소켓 타입은 소켓생성시 한번 결정되면 변경이 불가능하다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SO_SNDBUF &amp;amp; SO_RCVBUF&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//소켓 입출력버퍼의 크기 확인 및 수정&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;09-2-so_reuseaddr&quot;&gt;09-2 SO_REUSEADDR&lt;/h2&gt;

&lt;p&gt;주소할당 에러 발생(Binding Error)&lt;/p&gt;

&lt;p&gt;클라에서 강제로 종료를 진행하면 Four-way handshaking을 거치는데 이 때 FIN을 전송한다. 클라 쪽에서 콘솔을 닫든, ctrl + c를 입력하든 모두 FIN이 전송된다.&lt;/p&gt;

&lt;p&gt;서버쪽에서 ctrl+c와 같은 방법으로 FIN이 호출되면, 서버를 종료하고 나서 서버의 재실행에 문제가 생긴다. 동일한 port번호를 기준으로 ㅅ ㅓ버를 재실행하면 bind() error라는 메시지가 출력되고 서버는 실행되지 않는다. 하지만 이상태에서 약 3분정도 기다리면 정상적인 실행을 다시 할 수 있다.&lt;/p&gt;

&lt;p&gt;Time-Wait 상태&lt;/p&gt;

&lt;p&gt;Four-way handshaking의 과정은 아래와 같았다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A: 연결 끊고싶습니다. FIN SEQ 5000, ACK -&lt;/li&gt;
  &lt;li&gt;B: 잠시만요 ACK SEQ 7500, ACK 5001&lt;/li&gt;
  &lt;li&gt;B: 저도 끊을 준비가 됐습니다. 끊으세요. FIN SEQ 7501, ACK 5001&lt;/li&gt;
  &lt;li&gt;A: 네 연결 끊겠습니다. ACK SEQ 5001, ACK 7502&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ACK SEQ 5001, ACK 7502를 받은 호스트 B는 소켓을 소멸시킨다. 그런데 ACK SEQ 5001, ACK 7502를 전송한 호스트 A는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time-wait&lt;/code&gt;의 시간을 가지고 잠시 뒤에 소켓이 소멸된다. 소켓이 time-wait의 상태인 경우에는 소켓의 PORT 번호가 사용중이기 때문에 앞서 말했던 “서버를 재시작하는 경우”에는 소켓의 포트가 사용되고 있기 때문에 bind를 할 수 없었던 것이다.&lt;/p&gt;

&lt;p&gt;time-wair의 시간을 가지는 것은 클라/서버 상관없이 먼저 연결 종료를 요청한 쪽이다. 하지만 클라의 time-wait는 신경쓰지 않아도 되는데, 그 이유는 클라의 port는 임의로 할당되기 때문이다. 즉, 서버와 달리 프로그램이 실행될 때마다 port번호가 유동적으로 할당되기 때문에 time-wait 상태에 대해 신경쓰지 않아도 된다.&lt;/p&gt;

&lt;p&gt;위 예시에서 호스트 B는 ACK SEQ 5001, ACK 7502를 받아야 소켓을 소멸시키는데 A가 ACK SEQ 5001, ACK 7502를 보내고 먼저 소켓을 소멸시키면 ACK SEQ 5001, ACK 7502 메시지가 중간에 사라질 수 있고 이렇게되면 호스트 B의 소켓은 소멸하기 위한 신호를 받지 못한다. 그래서 조금 시간차를 두고 소멸시킨다.&lt;/p&gt;

&lt;p&gt;위 Four-way handshaking의 메시지를 1/2/3/4라고 할 때 A가 B에게 보낸 4가 소실되면, B는 A가 3을 받지 못한 것으로 생각하고 3을 다시 보낸다. 그런데 A는 3을 받으면 4를 보내면서 time-wait에 들어가는데 네트워크 상태가 좋지 못하면 이 과정이 계속 반복할 수 있다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해서는 아래와 같이 SO_REUSEARRD 옵션을 바꾸면 된다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;optlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
&lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serv_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOL_SOCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SO_REUSEADDR의 default 값은 0(false)로, 이는 time-wait 상태에 있는 소켓의 PORT 번호는 할당이 불가능함을 의미한다. 이 값을 1(true)로 바꾸면 time-wait된 port번호를 재할당하는 것이 가능하다.&lt;/p&gt;

&lt;h2 id=&quot;09-3-tcp_nodelay&quot;&gt;09-3 TCP_NODELAY&lt;/h2&gt;

&lt;p&gt;Nagle 알고리즘&lt;/p&gt;

&lt;p&gt;이 알고리즘은 네트워크 상에서 돌아다니느 패킷들이 흘러 넘침을 막기 위한 알고리즘이다. TCP 상에서 적용되는 매우 단순한 알고리즘으로써, 이이 적용여부에 따른 데이터 송수신의 차이는 아래와 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nagle 알고리즘 OFF
    &lt;ol&gt;
      &lt;li&gt;‘n’,’a’,’g’,’l’,’e’ 이 각각 data로 전송됨&lt;/li&gt;
      &lt;li&gt;각각에 대한 ACK이 수신됨&lt;/li&gt;
      &lt;li&gt;총 패킷 10개 송수신&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Nagle 알고리즘 OF
    &lt;ol&gt;
      &lt;li&gt;‘n’ 전송&lt;/li&gt;
      &lt;li&gt;ACK ‘n’&lt;/li&gt;
      &lt;li&gt;‘agle’ 전송&lt;/li&gt;
      &lt;li&gt;ACK ‘agle’&lt;/li&gt;
      &lt;li&gt;총 패킷 4개 송수신&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;나글 알고리즘은 앞서 전송한 데이터에 대한 ACK 메시지를 받아야만 다음 데이터를 전송하는 알고리즘이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;기본적으로 TCP 소켓은 나글알고리즘을 적용해서 데이터를 송수신한다. 때문에 ACK가 수신될 때까지 최대한 버퍼링을 해서 데이터를 전송한다. “Nagle”을 전송할 때 데이터를 출력버퍼로 이동시키다. 이때 출력버퍼가 비어있기 때문이 ‘n’가 들어오면 바로 전송을 하다. 그리고 나머지 데이터를 출력버퍼에 쌓아두고 ACK가 수신되면 출력버퍼에 있는 데이터를 전송한다.&lt;/p&gt;

&lt;p&gt;만약 용량이 큰 파일 데이터의 전송을 할 때에는 Nagle 알고리즘을 적용하지 않는 것이 더 좋을 수 있다. 파일 데이터를 출력버퍼로 밀어 넣는 작업은 시간이 걸리지 않는다. 때문에 나글 알고리즘을 적용하지 않아도 출력버퍼를 거의 꽉 채운 상태에서 패킷을 전송하게 된다. 따라서 패킷의 수가 크게 증가하지도 않을뿐더러, ACK를 기다리지 않고 데이터를 전송하니 전송속도도 놀랍게 향상된다.&lt;/p&gt;

&lt;p&gt;즉, 나글 알고리즘을 적용하지 않으면 속도의 향상을 기대할 수 있으나, 무조건 적용하지 않을 경우 트래픽에 상당한 부담을 주게 되어 더 좋지 않은 결과를 얻을 수 있다.&lt;/p&gt;</content><author><name>Niklas Jang</name></author></entry><entry><title type="html">[열혈TCP/IP] 08 도메인 이름과 인터넷 주소</title><link href="http://localhost:4000/ardenttcpip/chapter-8/" rel="alternate" type="text/html" title="[열혈TCP/IP] 08 도메인 이름과 인터넷 주소" /><published>2020-01-13T00:00:00+09:00</published><updated>2020-01-13T00:00:00+09:00</updated><id>http://localhost:4000/ardenttcpip/chapter-8</id><content type="html" xml:base="http://localhost:4000/ardenttcpip/chapter-8/">&lt;h1 id=&quot;08-도메인-이름과-인터넷-주소&quot;&gt;08 도메인 이름과 인터넷 주소&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;모든 컴퓨터에는 default DNS 서버의 주소가 등록되어 있는데, 이 default DNS 서버를 통해서 도메인 이름에 대한 IP주소를 얻는다.&lt;/li&gt;
  &lt;li&gt;브라우저 - 도메인 입력 - DNS 서버 - IP 주소 획득 - IP 주소로 접속&lt;/li&gt;
  &lt;li&gt;default DNS 서버가 모르면 상위 단계의 DNS 서버에게 물어보고 Root DNS 서버까지 질의를 해서 결국은 IP 주소를 알려준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;08-2-ip주소와-도메인-이름-사이의-변환&quot;&gt;08-2 IP주소와 도메인 이름 사이의 변환&lt;/h2&gt;

&lt;p&gt;도메인 이름을 이용해서 IP주소 얻어오기&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;netdb.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gethostbyname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;IP주소를 이용해서 도메인정보 얻어오기&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;netdb.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gethostbyaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Niklas Jang</name></author></entry><entry><title type="html">[열혈TCP/IP] 07 소켓의 우아한 연결종료 Half-close</title><link href="http://localhost:4000/ardenttcpip/chapter-7/" rel="alternate" type="text/html" title="[열혈TCP/IP] 07 소켓의 우아한 연결종료 Half-close" /><published>2020-01-13T00:00:00+09:00</published><updated>2020-01-13T00:00:00+09:00</updated><id>http://localhost:4000/ardenttcpip/chapter-7</id><content type="html" xml:base="http://localhost:4000/ardenttcpip/chapter-7/">&lt;h1 id=&quot;07-소켓의-우아한-연결종료-half-close&quot;&gt;07 소켓의 우아한 연결종료 Half-close&lt;/h1&gt;

&lt;p&gt;일방적인 연결종료의 문제점&lt;/p&gt;

&lt;p&gt;리눅스의 clsoe()의 호출은 완전종류를 의미한다. 완전종료라는 것은 데이터를 전송하는 것은 물론, 수신하는 것도 더 이상 불가능한 상황을 의미한다. 때문에 한쪽에서의 일방적인 close()의 호출은 우아하지 못하다.&lt;/p&gt;

&lt;p&gt;두 호스트가 데이터를 주고 받을 때  한 쪽이 먼저 완전종료를 해버리면 아직 송신했지만 수신되지 못한 데이터가 있을 수 있다. 이러한 문제를 해결하기 위해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Half close&lt;/code&gt;의 개념을 사용한다. 이는 전송은 가능하지만 수신은 불가능한 상황, 혹은 수신은 가능하지만 전송은 불가능한 상황을 뜻한다. 말 그대로 스트림의 반만 닫는 것이다.&lt;/p&gt;

&lt;p&gt;소켓과 스트림Stream / connection 과 stream&lt;/p&gt;

&lt;p&gt;소켓을 통해서 두 호스트가 연결되면, 그 다음부터는 상호간에 데이터를 송수신이 가능한 상태가 된다. 이러한 상태를 stream이 형성된 상태라고 한다. 즉, 두 소켓이 연결되어서 데이터의 송수신이 가능한 상태를 일종의스트림으로 보는 것이다. stream은 물의 흐름을 의미한다. 물의 흐름은 한쪽 방향으로만 형성된다. 따라서 소켓 스트림 역시 양방향 데이터의 이동이 가능하기 위해서는 두 개의 스트림이 필요하다.&lt;/p&gt;

&lt;p&gt;때문에 두 호스트간에 소켓이 연결되면, 각 호스트 별로 입력 스트림과 출력 스트림이 형성된다. 물론 한 호스트의 출력 스트림은 다른 호스트의 입력스트림으로 이어진다. Half close라는 것은 둘 중 하나의 stream만 끊는 것이다. 물론 리눅스의 close() 호출은 두 가지 스트림을 동시에 끊어서 우아하지 못하다.&lt;/p&gt;

&lt;p&gt;우아한 종료를 위한&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shutdown()&lt;/code&gt; 함수&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/socket.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;howto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
return 성공시 0, 실패시 -1
sock : 종료한소켓의 fd 전달
howto : 종료 방법에 대한 정보 전달
    - SHUT_RD : 입력 스트림 종료
    - SHUT_WR : 출력 스트림 종료
    - SHUT_RDWR : 입출력 스트림 종료
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;SHUT_RD를 전달하면 입력스트림이 종료된다. 데이터가 입력 버퍼에 전달되더라도 지워지고 입력관련 함수의 호출도 불가능한 상태가 된다.&lt;/li&gt;
  &lt;li&gt;SHUT_WR를 전달하면 출력스트림이 종료된다. 더이상의 데이터를 전송하는 것이 불가능해지지만 아직 출력버퍼에 데이터가 남아있으면 해당데이터는 모두 목적지로 전송된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Half-close가 필요한 이유&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;연결 종료 직전에 클라가 서버에 전송할 데이터(“아래의 Thank you”)가 있는 경우, 서버는 데이터를 계속 보내면 되지만 클라는 언제 데이터를 수신해야하는지 잘 모른다. 계속해서 입력 함수를 호출하면 블로킹상태(호출된 함수가 반환하지 않는 상태)에 빠질 수 있다.&lt;/li&gt;
  &lt;li&gt;전송되는 파일의 끝에 특정 문자를 추가해도 특정 문자가 데이터 파일에 존재할 수도 있기 때문에 적절하지 못하다. 따라서 이를 위해서 서버는 파일의 전송이 끝났음을 의미하기 위해 EOF를 전송해야한다. 클라는 EOF의 수신을 함수의 반환값을 통해서 확인이 가능하기 때문에 저장된 데이터와 중복될 일도 없다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버는 출력 스트림을 종료하면 상대 호스트에게 EOF가 전송되기 때문에 신뢰가능한 데이터 송수신이 완성된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;클라 : 연결요청&lt;/li&gt;
  &lt;li&gt;서버 : 파일 데이터&lt;/li&gt;
  &lt;li&gt;서버 : EOF&lt;/li&gt;
  &lt;li&gt;클라 : Thank you&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;파일 전송 예제 필요하면 책 174 페이지 참조&lt;/p&gt;</content><author><name>Niklas Jang</name></author></entry></feed>