<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-08-14T10:00:27+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">NiklasJang’s Blog</title><subtitle>반갑습니다. niklas jang입니다.</subtitle><author><name>Niklas Jang</name></author><entry><title type="html">[PS][Java] java PS 몸풀기</title><link href="http://localhost:4000/ps/java-ps-warming-up/" rel="alternate" type="text/html" title="[PS][Java] java PS 몸풀기" /><published>2020-08-13T00:00:00+09:00</published><updated>2020-08-13T00:00:00+09:00</updated><id>http://localhost:4000/ps/java-ps-warming-up</id><content type="html" xml:base="http://localhost:4000/ps/java-ps-warming-up/">&lt;h1 id=&quot;터렛&quot;&gt;&lt;a href=&quot;boj.kr/1002&quot;&gt;터렛&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;풀이-1--두-점에서-만나는-경우를-정의하지-못한-경우&quot;&gt;풀이 1 : 두 점에서 만나는 경우를 정의하지 못한 경우.&lt;/h2&gt;

&lt;p&gt;두 명의 관측자의 좌표와 관측한 거리가 주어진다. 따라서 두 개의 원의 중심과 반지름 길이를 알 수 있다. 두 개의 원이 0,1,2 점에서 겹치는 경우를 따져보면 된다. 겹치는 점의 갯수와 상관없이 두 개의 원이 안으로 만나는지, 밖으로 만나는지를 따져야 한다.&lt;/p&gt;

&lt;p&gt;dist를 두 원의 중심 사이의 거리라고 할 때,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;만나지 않는 경우 :
    &lt;ul&gt;
      &lt;li&gt;원이 원을 포함하는 경우 : r1 + dist &amp;lt; r2 || r2 + dist &amp;lt; r1&lt;/li&gt;
      &lt;li&gt;두 원이 서로 포함하지도 겹치지도 않는 경우 : r1 + r2 &amp;lt; dist&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;한 점에서 만나는 경우
    &lt;ul&gt;
      &lt;li&gt;내접 : r1 + dist == r2 || r2 + dist == r1&lt;/li&gt;
      &lt;li&gt;외접 : r1 + r2 + dist&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;두 점에서 만나는 경우
    &lt;ul&gt;
      &lt;li&gt;나머지 경우&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;풀이-2--두-점에서-만나는-경우를-정의한-경우&quot;&gt;풀이 2 : 두 점에서 만나는 경우를 정의한 경우.&lt;/h2&gt;

&lt;p&gt;두 원이 두 점에서 만나는 경우는 두 원이 내접하는 경우와 외접하는 경우를 적용해서 풀 수 있다. 두 원이 내접하는 경우, 중심 사이의 거리는 |r1-r2|가 되고, 두 원이 외접하는 경우 중심 사이의 거리는 (r1+r2)가 된다. 따라서 두 원 사이의 거리가 |r1-r2|와 (r1+r2) 사이에 존재하는 경우 두 원은 두 점에서 접한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;두 점에서 만나는 경우
    &lt;ul&gt;
      &lt;li&gt;|r1-r2| &amp;lt; dist &amp;amp;&amp;amp; dist &amp;lt; (r1+r2)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;한 점에서 만나는 경우
    &lt;ul&gt;
      &lt;li&gt;|r1-r2| == dist &amp;amp;&amp;amp; dist == (r1+r2)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;만나지 않는 경우
    &lt;ul&gt;
      &lt;li&gt;나머지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;코드&quot;&gt;코드&lt;/h2&gt;

&lt;p&gt;java로 백준에 제출할 때에는&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;제출 언어를 java로 설정하고&lt;/li&gt;
  &lt;li&gt;Main class 안에 main 함수에서 코드를 작성하고&lt;/li&gt;
  &lt;li&gt;package me.niklasjang; 정보를 제외하고 제출한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//풀이 1&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//            System.out.println(tc +&quot;:&quot; + input);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)*(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)*(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//중심이 같은 경우&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//한 점에서 만나는 경우&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//만나지 않는 경우&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//두 점에서 만나는 경우&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//풀이 2&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)+&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minDist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxDist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minDist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxDist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minDist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxDist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//실행시간 104ms에서 92ms로 줄이는 StringTokenizer 사용&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//StringTokenizer st = new StringTokenizer(&quot;string&quot;,&quot;-=,./&quot;);&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//x1 y1 r1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//x2 y2 r2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//        int[][][] code = new int[tc][2][3];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minDist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxDist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)+&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;minDist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;maxDist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minDist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxDist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minDist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxDist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;어린왕자&quot;&gt;&lt;a href=&quot;boj.kr/1004&quot;&gt;어린왕자&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;

&lt;p&gt;행성계의 진입/탈출은 주어진 원의 경계를 통과하는 것으로 생각할 수 있다. 따라서 출발지점과 도착지점이 주어지는 모든 원의 경계 내부에 있는지 아닌지를 판단하면 된다. 단, 출발지점과 도착지점이 모두 포함되는 원은 진입/탈출하지 않아도 된다. 따라서 출발지점과 도착지점 둘 중 하나만 포함되는 원의 갯수를 세면 된다. 출발/도착 지점에 대해서 각각의 원이 포함되는지 판단하고, 두 지점 모두 포함되는 경우는 세지않기 때문에 xor을 적용하면 된다. xor는 같으면 0, 다르면 1을 return 한다.&lt;/p&gt;

&lt;h2 id=&quot;코드-1&quot;&gt;코드&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.swing.plaf.synth.SynthEditorPaneUI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
       &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
       &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
           &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
           &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
               &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
               &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
           &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;다리놓기&quot;&gt;&lt;a href=&quot;boj.kr/1010&quot;&gt;다리놓기&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;풀이-1&quot;&gt;풀이&lt;/h2&gt;

&lt;p&gt;n과 m을 입력받아서 mCn을 계산하면 된다. n과 m이 충분히 크기 때문에 BigInteger를 사용한다.&lt;/p&gt;

&lt;h2 id=&quot;코드-2&quot;&gt;코드&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.swing.plaf.synth.SynthEditorPaneUI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.math.BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.function.BiFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BigInteger&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
       &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
           &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
           &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
           &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;divide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))));&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Niklas Jang</name></author><category term="math" /><category term="java" /><category term="ps" /><summary type="html">BOJ 1002 터렛</summary></entry><entry><title type="html">[자격증][정처기] 5과목 정보시스템 구축 관리 - 1</title><link href="http://localhost:4000/eip/EIP-Subject-5-1/" rel="alternate" type="text/html" title="[자격증][정처기] 5과목 정보시스템 구축 관리 - 1" /><published>2020-08-10T00:00:00+09:00</published><updated>2020-08-10T00:00:00+09:00</updated><id>http://localhost:4000/eip/EIP-Subject-5-1</id><content type="html" xml:base="http://localhost:4000/eip/EIP-Subject-5-1/">&lt;h1 id=&quot;1장-소프트웨어-개발-방법론-활용&quot;&gt;1장 소프트웨어 개발 방법론 활용&lt;/h1&gt;

&lt;h2 id=&quot;157-소프트웨어-개발-방법론&quot;&gt;157 소프트웨어 개발 방법론&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;소프트웨어 개발, 유지보수를 위한 수행 방법/기법을 표준화 한 것&lt;/li&gt;
  &lt;li&gt;목적 : 생산성과 품질 향상&lt;/li&gt;
  &lt;li&gt;방법론 종류
    &lt;ul&gt;
      &lt;li&gt;구조적 방법론
        &lt;ul&gt;
          &lt;li&gt;정형화된 분석 절차에 따라 사용자 요구사항을 파악해서 문서화하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;처리Process&lt;/code&gt; 중심의 방법론&lt;/li&gt;
          &lt;li&gt;목적 : 쉬운 이해 및 검증이 가능한 프로그램 개발&lt;/li&gt;
          &lt;li&gt;분할과 정복 원리를 적용&lt;/li&gt;
          &lt;li&gt;타당성 검토 - 계획 - 요구사항 - 설계 - 구현 - 시험 - 운용/유지보수&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;정보공학 방법론
        &lt;ul&gt;
          &lt;li&gt;정보 시스템의 개발을 위해 계획,분석,설계 구축에 정형화된 기법들을 상호 연관성있게 통합하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;자료Data&lt;/code&gt; 중심의 방법론&lt;/li&gt;
          &lt;li&gt;대규모 정보 시스템을 구축하는데 적함&lt;/li&gt;
          &lt;li&gt;정보 전략 계획 수립 - 업무 영역 분석 - 업무 시스템 설계 - 업무 시스템 구축&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;객체지향 방법론
        &lt;ul&gt;
          &lt;li&gt;Entity를 Object로 만들어 객체들을 조립해서 소프트웨어를 구현하는 방법론&lt;/li&gt;
          &lt;li&gt;구조적 기법의 문제점으로 인한 소프트웨어 위기의 해결책으로 채택&lt;/li&gt;
          &lt;li&gt;구성요소 : Entity, Object, Message 등&lt;/li&gt;
          &lt;li&gt;기본원칙 : 캡슐화(데이터와 데이터를 처리하는 함수를 하나로 묶음), 정보 은닉, 추상화(중요한 부분을 중심으로 개략화), 상속성, 다형성(하나의 메세지에 대해 각 객체가 가지고 있는 고유한 방법으로 응답) 등&lt;/li&gt;
          &lt;li&gt;요구 분석 - 설계 - 구현 - 테스트 및 검증 - 인도&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;컴포넌트 기반 방법론
        &lt;ul&gt;
          &lt;li&gt;기존 시스템이나 소프트웨어를 구성하는 컴포넌트를 조합하여 하나의 새로운 앱을 만드는 방법론&lt;/li&gt;
          &lt;li&gt;컴포넌트의 재사용이 가능&lt;/li&gt;
          &lt;li&gt;유지 보수 비용 최소화. 생산성 및 품질 향상&lt;/li&gt;
          &lt;li&gt;개발 준비 - 분석 - 설계 - 구현 - 테스트 - 전개 - 인도&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;애자일 방법론
        &lt;ul&gt;
          &lt;li&gt;애자일 : 민첩한, 기민한&lt;/li&gt;
          &lt;li&gt;고객의 요구사항 변환에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발 과정을 진행하는 방법론&lt;/li&gt;
          &lt;li&gt;소규모 프로젝트, 고도로 숙달된 개발자, 급변하는 요구사항&lt;/li&gt;
          &lt;li&gt;종류 : 익스트림 프로그래밍XP, 스크럼, 칸반, 크리스탈&lt;/li&gt;
          &lt;li&gt;사용자 스토리 -&amp;gt; 반복주기(계획 - 개발 - 승인 테스트)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;제품 계열 방법론
        &lt;ul&gt;
          &lt;li&gt;특정 제품에 적용하고 싶은 공통된 기능을 정의하여 개발하는 방법론&lt;/li&gt;
          &lt;li&gt;임베디드 소프트웨어를 개발하는데 적합&lt;/li&gt;
          &lt;li&gt;구분
            &lt;ul&gt;
              &lt;li&gt;영역공학 : 영역 분석, 영역 설계, 핵심 자산 구현&lt;/li&gt;
              &lt;li&gt;응용공학 : 제품 요구사항 분석, 제품 설계, 제품 구현&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;영역공학과 응용공학의 연계를 위한 제품의 요구사항, 아키텍쳐, 조립 생산이 필요하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;158-비용-산정-기법&quot;&gt;158 비용 산정 기법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;소프트웨어의 개발 규모를 소요되는 인원, 자원, 기간 등으로 확인하여 실행 가능한 계획을 수립하기 위해 필요한 비용을 산정&lt;/li&gt;
  &lt;li&gt;너무 높게 설정 : 예산 낭비, 일의 효율성 저하&lt;/li&gt;
  &lt;li&gt;너무 낮게 설정 : 개발자 부담 증가, 품질 문제&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;비용 결정 요소&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3가지 이름&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프로젝트 요소&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3가지 이름&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;제품 복잡도 : 문제점 난이도&lt;/li&gt;
          &lt;li&gt;시스템 크기 : 일정 기간 내 주어진 조건에서 기능을 수행하는 정도&lt;/li&gt;
          &lt;li&gt;요구되는 신뢰도&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;자원 요소&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3가지 이름&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;인적 자원&lt;/li&gt;
          &lt;li&gt;하드웨어 자원&lt;/li&gt;
          &lt;li&gt;소프트웨어 자원&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;생산성 요소&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2가지 이름 구분&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;개발자 능력&lt;/li&gt;
          &lt;li&gt;개발 기간&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;159-비용-산정-기법---하향식&quot;&gt;159 비용 산정 기법 - 하향식&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;과거의 유사한 경험을 바탕으로 전문 지식이 많은 개발자들이 참여한 회의를 통해 비용 산정하는 비과학적인 방법&lt;/li&gt;
  &lt;li&gt;프로젝트 전체 비용을 산정한 후 각 작업별로 비용을 세분화한다.&lt;/li&gt;
  &lt;li&gt;종류
    &lt;ul&gt;
      &lt;li&gt;전문가 감정 기법
        &lt;ul&gt;
          &lt;li&gt;경험이 많은 두 명 이상의 전문자에게 비용 산정을 의뢰&lt;/li&gt;
          &lt;li&gt;편리, 신속, 의뢰자로부터 믿음을 얻을 수 있다.&lt;/li&gt;
          &lt;li&gt;새로운 프로젝트에는 과거의 프로젝트와 다른 요소들이 있다는 것을 간과할 수 있음&lt;/li&gt;
          &lt;li&gt;새로운 프로젝트와 유사한 프로젝트에 대한 경험이 없을 수 있다.&lt;/li&gt;
          &lt;li&gt;개인적이고 주관적일 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;델파이 기법
        &lt;ul&gt;
          &lt;li&gt;주관적인 편견을 보완하기 위해 많은 전문가의 의견을 종합하여 산정하는 기법&lt;/li&gt;
          &lt;li&gt;한 명의 조정자와 여러 전문가로 구성&lt;/li&gt;
          &lt;li&gt;비용 산정 순서
            &lt;ol&gt;
              &lt;li&gt;조정자는 각 비용 산정 요원에게 시스템 정의서와 산정한 비용 내역을 기록할 서식 제공&lt;/li&gt;
              &lt;li&gt;산정 요원들은 정의서를 분석하여 익명으로 그들 나름대로의 비용을 산정&lt;/li&gt;
              &lt;li&gt;조정자는 산정 요원들의 반응을 요약, 배포&lt;/li&gt;
              &lt;li&gt;산정 요원들은 이전에 산정한 결고를 이용항 다시 익명으로 산정&lt;/li&gt;
              &lt;li&gt;요원들 간의 의견이 거의 일치할 때까지 이 과정을 반복&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;160-비용-산정-기법---상향식&quot;&gt;160 비용 산정 기법 - 상향식&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프로젝트의 세부적인 작업 단위별로 비용을 산정한 후 집계하여 전체 비용을 산정하는 방법&lt;/li&gt;
  &lt;li&gt;종류
    &lt;ul&gt;
      &lt;li&gt;LOC(원시 코드 라인 수, Line Of Code) 기법
        &lt;ul&gt;
          &lt;li&gt;각 기능의 원시 코드 라인 수의 비관치, 낙관치, 기대치를 측정하여 예측치를 구하고 이를 이용하는 방법&lt;/li&gt;
          &lt;li&gt;예측지 = (비관치 + 4*낙관치 + 기대치) / 6&lt;/li&gt;
          &lt;li&gt;산정 공식
            &lt;ul&gt;
              &lt;li&gt;노력(인원man month) = 개발 기간 x 투입 인원 = LOC / 1인당 월평균 생산 코드 라인 수&lt;/li&gt;
              &lt;li&gt;개발 비용  = 노력 x 단위 비용(1인당 월평균 인건비)&lt;/li&gt;
              &lt;li&gt;개발 기간 = 노력 / 투입 인원&lt;/li&gt;
              &lt;li&gt;생산성 = LOC / 노력&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;개발 단계별 인월수(Effort Per Taks) 기법
        &lt;ul&gt;
          &lt;li&gt;LOC를 보완하기 위한 기법으로, 각 기능을 구현시키는 데 필요한 노력을 생명 주기의 각 단계 별로 산정&lt;/li&gt;
          &lt;li&gt;LOC 보다 더 정확하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;수학적 산정 기법&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;161-수학-산정-기법&quot;&gt;161 수학 산정 기법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;상향식 비용 산정 기법 중 하나&lt;/li&gt;
  &lt;li&gt;= 경험적 추정 모형 = 실험적 추정 모형&lt;/li&gt;
  &lt;li&gt;목표 : 개발 비용 산정의 자동화&lt;/li&gt;
  &lt;li&gt;공식은 과거 유사한 프로젝트를 기반으로하여 경험적으로 유도된 것&lt;/li&gt;
  &lt;li&gt;종류
    &lt;ul&gt;
      &lt;li&gt;COCOMO 모형
        &lt;ul&gt;
          &lt;li&gt;COnstructive COst MOdel 모형&lt;/li&gt;
          &lt;li&gt;LOC에 의한 비용 산정 기법&lt;/li&gt;
          &lt;li&gt;LOC를 예측한 후 소프트웨어 종류에 따라 다르게 책정되는 비용 산정 방정식에 대입하여 비용 산정&lt;/li&gt;
          &lt;li&gt;비용 견적의 강도 분석 및 비용 견적의 유연성이 높아 널리 통용&lt;/li&gt;
          &lt;li&gt;같은 규모의 프로그램이더라도 그 성격에 따라 비용이 다르게 산정된다.&lt;/li&gt;
          &lt;li&gt;비용 산정 결과는 프로젝트를 완성하는데 필요한 Man-Month로 나타난다.&lt;/li&gt;
          &lt;li&gt;Boeham이 고안한 개발비 산정 모델로 프로젝트의 예쌍되는 크기와 유형에 관한 정보가 주로 사용된다.&lt;/li&gt;
          &lt;li&gt;프로젝트 특성을 15개로 나누고 각각에 대한 승수값을 제시하였다.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;개발 유형&lt;/code&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Mode&lt;/code&gt;
            &lt;ul&gt;
              &lt;li&gt;조직형&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Organic&lt;/code&gt; Mode
                &lt;ul&gt;
                  &lt;li&gt;기관 내부에서 개발된 중,소 규모의 소프트웨어로 일괄 자료 처리, 비즈니스 자료 처리용으로 5만라인 이하의 SW 개발 유형&lt;/li&gt;
                  &lt;li&gt;노력 = 2.4 X KDSI^{1.05}&lt;/li&gt;
                  &lt;li&gt;개발기간 = 2.5 X MM^{0.38}&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;반분리형&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Semi-Detached&lt;/code&gt; Mode
                &lt;ul&gt;
                  &lt;li&gt;조직형과 내장형의 중간형.&lt;/li&gt;
                  &lt;li&gt;트랜잭션 처리 시스템이나 운영체제, 데이터베이스 관리 시스템 등 30만 라인 이하의 SW 개발 유형&lt;/li&gt;
                  &lt;li&gt;노력 = 3.0 X KDSI^{1.12}&lt;/li&gt;
                  &lt;li&gt;개발기간 = 2.5 X MM^{0.35}&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;내장형&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Embedded&lt;/code&gt; Mode
                &lt;ul&gt;
                  &lt;li&gt;최대형 규모의 트랜잭션 처리 시스템이나 운영체제 등의 30만라인 이상의 SW 개발 유형&lt;/li&gt;
                  &lt;li&gt;신호기 제어 시스템, 미사일 유도 시스템, 실시간 처리 시스템 등의 시스템 프로그램 개발에 적합&lt;/li&gt;
                  &lt;li&gt;노력 = 3.6 X KDSI^{1.20}&lt;/li&gt;
                  &lt;li&gt;개발기간 = 2.5 X MM^{0.32}&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;모형 종류&lt;/code&gt;
            &lt;ul&gt;
              &lt;li&gt;기본형Basic COCOMO
                &lt;ul&gt;
                  &lt;li&gt;소프트웨어 크기LOC와 개발 유형만을 이용하여 비용 산정&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;중간형Intermediate COCOMO
                &lt;ul&gt;
                  &lt;li&gt;기본형 COCOMO 공식 사용&lt;/li&gt;
                  &lt;li&gt;4가지 특성의 15가지 요인에 의해 비용 산정
                    &lt;ul&gt;
                      &lt;li&gt;제품의 특성
                        &lt;ul&gt;
                          &lt;li&gt;요구되는 신뢰도/DB 크기/제품의 복잡도&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                      &lt;li&gt;컴퓨터의 특성
                        &lt;ul&gt;
                          &lt;li&gt;수행 시간의 제한/기억 장소의 제한/가상 기계의 안정성/Turn Around Time&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                      &lt;li&gt;개발 요원의 특성
                        &lt;ul&gt;
                          &lt;li&gt;분석가의 능력/개발 분야의 경험/가상 기계의 경험/프로그래머 능력/프로그래밍 언어의 경험&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                      &lt;li&gt;프로젝트 특성
                        &lt;ul&gt;
                          &lt;li&gt;소프트웨어 도구의 이용/프로제그 개발 일정/최신 프로그래밍 기법의 이요&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;발전형Detailed COCOMO
                &lt;ul&gt;
                  &lt;li&gt;중간형 COCOMO를 보완하여 만들어진 방법&lt;/li&gt;
                  &lt;li&gt;개발 공정별로 자세한 노력을 산출해 비용 산정&lt;/li&gt;
                  &lt;li&gt;소프트웨어 환경과 구성 요소가 사전에 정의되어 있어야 하며, 개발 과정의 후반부에 주로 적용한다.&lt;/li&gt;
                  &lt;li&gt;중간형 COCOMO 산정 공식 그대로 사용&lt;/li&gt;
                  &lt;li&gt;노력 승수 = 개발 공정별 노력 승수 x 개발 공정별 가중치&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Putnam 모형
        &lt;ul&gt;
          &lt;li&gt;소프트웨어 생명 주기의 전 과정 동안에 사용될 노력의 분포를 가정&lt;/li&gt;
          &lt;li&gt;= 생명주기 예측 무형&lt;/li&gt;
          &lt;li&gt;설계 및 코딩/테스트 및 확인/확장/유지.보수/수정/관리 등의 생명 주기가 있다.&lt;/li&gt;
          &lt;li&gt;대형 프로젝트의 노력 분포 산정에 이용되는 기법&lt;/li&gt;
          &lt;li&gt;개발 기간이 늘어날 수록 프로젝트 적용 인원의 노력이 감소한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;기능 점수 모형
        &lt;ul&gt;
          &lt;li&gt;SW 기능을 증대시키는 요인별 가중치를 부여하고, 요인별 가중치를 합산하여 총 기능 점수를 산출하여 총 기능 점수와 영향도를 통해 비용 산출&lt;/li&gt;
          &lt;li&gt;
            &lt;table&gt;
              &lt;tbody&gt;
                &lt;tr&gt;
                  &lt;td&gt;소프트웨어 기능 증대 요인&lt;/td&gt;
                  &lt;td&gt;가중치 단순&lt;/td&gt;
                  &lt;td&gt;가중치 보통&lt;/td&gt;
                  &lt;td&gt;가중치 복잡&lt;/td&gt;
                &lt;/tr&gt;
              &lt;/tbody&gt;
            &lt;/table&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;table&gt;
              &lt;tbody&gt;
                &lt;tr&gt;
                  &lt;td&gt;자료 입력(입력 양식)&lt;/td&gt;
                  &lt;td&gt;3&lt;/td&gt;
                  &lt;td&gt;4&lt;/td&gt;
                  &lt;td&gt;6&lt;/td&gt;
                &lt;/tr&gt;
              &lt;/tbody&gt;
            &lt;/table&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;162-소프트웨어-개발-방법론-결정&quot;&gt;162 소프트웨어 개발 방법론 결정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프로젝트 고나리와 재사용 현황을 소프트웨어 개발 방법론에 반영하고, 확정된 소프트웨어 생명 주기와 개발 방법론에 맞추어 소프트웨어 개발 단계, 활동, 작업, 절차 등을 정의하는 것이다.&lt;/li&gt;
  &lt;li&gt;프로젝트 관리 = 일정/비용/인력/위험/품질 관리&lt;/li&gt;
  &lt;li&gt;결정 절차
    &lt;ol&gt;
      &lt;li&gt;프로젝트 관리와 재사용 현황을 소프트웨어 개발 방법론에 반영한다.&lt;/li&gt;
      &lt;li&gt;개발 단계별 자격 및 절치를 소프트웨어 생명 주기에 맞춰 수립한다.
        &lt;ul&gt;
          &lt;li&gt;생명주기는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;기본/지원/조직&lt;/code&gt; 생명주기로 나뉜다.&lt;/li&gt;
          &lt;li&gt;개발 프로세스/개발 생명 주기/ 프로세스 모형을 정리&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;결정된 방법론의 개발 단계별 활동 목적, 작업 내용 산출물에 대한 매뉴얼을 작성한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;163-소프트웨어-개발-표준&quot;&gt;163 소프트웨어 개발 표준&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;개발 단계에서 수행하는 품질 관리에 사용되는 국제 표준&lt;/li&gt;
  &lt;li&gt;ISO/IEC 12207
    &lt;ul&gt;
      &lt;li&gt;ISO,International Organization for Standardization, 국제 표준화 기구 에서 만든 포준 소프트웨어 생명 주기 프로세스.&lt;/li&gt;
      &lt;li&gt;소프트웨어 개발,운영, 유지보수 등을 체계적으로 관리하기 위한 소프트웨어 생명 주기 표준 제공
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;기본&lt;/code&gt; 생명 주기 프로세스 : 획득,공급,개발,운영,유지보수 프로세스&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;지원&lt;/code&gt; 생명 주기 프로세스 : 품질 보증, 검증,확인,활동 검토,감사,문서화,형상 간리,문제 해결프로세스&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;조직&lt;/code&gt; 생명 주기 프로세스 : 관리,기반 구조, 훈련, 개선 프로세스&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CMMI(Capability Maturity Model Integration)
    &lt;ul&gt;
      &lt;li&gt;능력 성숙도 통합 모델&lt;/li&gt;
      &lt;li&gt;소프트웨어 개발 조직의 업무 능력 및 조직의 성숙도를 평가하는 모델&lt;/li&gt;
      &lt;li&gt;미국 카네기멜론 대학교의 소프트웨어 공학 연구소에서 개발&lt;/li&gt;
      &lt;li&gt;소프트웨어 프로세스 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;성숙도&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;초기/관리/정의/정량적 관리/최적화&lt;/code&gt; 5단계로 구분한다.
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;초기 : 작업자 능력에 따라 성공 여부 결정&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;관리 : 특정한 프로젝트 내의 프로세스 정의 및 수행&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;정의 : 조직의 표준 프로세스를 활용하여 업무 수행&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;정량적 관리 : 프로젝트를 정량적으로 관리 및 통제&lt;/li&gt;
          &lt;li&gt;최적화 : 프로세스 역량 향상을 위해 지속적인니 프로세스 개선&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SPICE(Software Process Improvement and Capabilit dEtermination)
    &lt;ul&gt;
      &lt;li&gt;프로세스 범위 구분
        &lt;ul&gt;
          &lt;li&gt;고객 공급자Customer-Supplier 프로세스 : 소프트웨어를 개발하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;고객에게 전달하는 것을 지원&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;운용, 사용&lt;/code&gt;을 위한 프로세스로 구성&lt;/li&gt;
          &lt;li&gt;공학Engineering 프로세스 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;제품의 명시화, 구현, 유지 보수&lt;/code&gt;하는데 사용되는 프로세스로 구성&lt;/li&gt;
          &lt;li&gt;지원Support 프로세스 : 생명주기에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;다른 프로세스에 의해 이용&lt;/code&gt;되는 프로세스로 구성&lt;/li&gt;
          &lt;li&gt;관리Manaement 프로세스 : 프로젝트 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;관리자&lt;/code&gt;에 의해 사용되는 프로세스로 구성&lt;/li&gt;
          &lt;li&gt;조직Organization 프로세스 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;조직의 업무 목적 수립과 조직의 업무 목표 달성&lt;/code&gt;을 위한 프로세스로 구성&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;프로세스 수행 능력 단계 구분
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;불완전&lt;/code&gt; : 프로세스가 구현되지 않았거나 목적을 달성하지 못한 단계&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;수행&lt;/code&gt; : 프로세스가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;수행되고 목적이 달성&lt;/code&gt;된 단계&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;관리&lt;/code&gt; : 정의된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;자원의 한도&lt;/code&gt; 내에서 그 프로세스가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;작업 산출물을 인도&lt;/code&gt;하는 단계&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;확립&lt;/code&gt; : 소프트웨어 공학 원칙에 기반하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;정의된 프로세스가 수행&lt;/code&gt;되는 단계&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;예측&lt;/code&gt; : 프로세스가 목적 달성을 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;통제&lt;/code&gt;되고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;양적인 측정&lt;/code&gt;을 통해서 일관되게 수행되는 단계&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;최적화&lt;/code&gt; : 프로세스 수행을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;최적화&lt;/code&gt;하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;지속적인 개선&lt;/code&gt;을 통해 업무 목적을 만족시키는 단계&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;164-소프트웨어-개발-방법론-테일러링&quot;&gt;164 소프트웨어 개발 방법론 테일러링&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;방법론의 절차, 사용 기법 등을 수정 및 보완하는 작업&lt;/li&gt;
  &lt;li&gt;수행 절차 : 프로젝트 특징 정의 - 표준 프로세스 선정 및 검증 - 상위 수준의 커스터마이징 - 세부 커스터마이징 - 테일러이 문서화&lt;/li&gt;
  &lt;li&gt;내부적 요건
    &lt;ul&gt;
      &lt;li&gt;목표 환경&lt;/li&gt;
      &lt;li&gt;요구 사항&lt;/li&gt;
      &lt;li&gt;프로젝트 규모&lt;/li&gt;
      &lt;li&gt;보유 기술&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;외부적 요건
    &lt;ul&gt;
      &lt;li&gt;법적 제약사항&lt;/li&gt;
      &lt;li&gt;표준 품질 기준&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테일러링 기법 : 규모와 복잡도에 따라/구성원에 따라/팀내 방법론 지원에 따라/자동화에 따라&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;165-소프트웨어-개발-프레임워크&quot;&gt;165 소프트웨어 개발 프레임워크&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;스프링 프레임워크
    &lt;ul&gt;
      &lt;li&gt;자바 플랫폼을 위한 오픈소스 경량형 앱 프래임워크&lt;/li&gt;
      &lt;li&gt;동적인 웹 사이트 개발을 위한 다양한 서비스 제공&lt;/li&gt;
      &lt;li&gt;전자 정부 표준 프레임워크의 기반 기술&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;전자정부 프레임워크
    &lt;ul&gt;
      &lt;li&gt;공공부문 정보화 사업 시 효율적인 정보 시스템의 구축을 지원하기 위해 필요한 기능 및 아키텍쳐를 제공하는 프레임워크&lt;/li&gt;
      &lt;li&gt;개발 프레임워크의 표준 정립으로 응용 소프트웨어의 표준화, 품질 및 재사용성의 향상을 목적으로 한다.&lt;/li&gt;
      &lt;li&gt;오픈 소스 기반의 범요화가 되고 공개된 기술을 활용 -&amp;gt; 특정 업체의 종속성을 배제하고 사업별 공통 컴포넌트의 중복 개발을 방지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;닷넷 프레임워크
    &lt;ul&gt;
      &lt;li&gt;Windows 프로그램의 개발 및 실행 환경을 제공하는 프레임워크. MS의 통합 인터넷 전략에 의해 개발&lt;/li&gt;
      &lt;li&gt;코드 실행을 관리하는 CLR(Common Language Runtime)이라는 이름의 가상머신에서 작동한다.&lt;/li&gt;
      &lt;li&gt;메모리 관리, 메모리 안전성, 보안 네트워크 작업 등 여러 가지 서비스를 제공한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Niklas Jang</name></author><category term="EIP" /><summary type="html">1장 소프트웨어 개발 방법론 활용</summary></entry><entry><title type="html">[자격증][정처기] 5과목 정보시스템 구축 관리 - 2</title><link href="http://localhost:4000/eip/EIP-Subject-5-2/" rel="alternate" type="text/html" title="[자격증][정처기] 5과목 정보시스템 구축 관리 - 2" /><published>2020-08-10T00:00:00+09:00</published><updated>2020-08-10T00:00:00+09:00</updated><id>http://localhost:4000/eip/EIP-Subject-5-2</id><content type="html" xml:base="http://localhost:4000/eip/EIP-Subject-5-2/">&lt;h1 id=&quot;2장-it-프로젝트-정보-시스템-구축-관리&quot;&gt;2장 IT 프로젝트 정보 시스템 구축 관리&lt;/h1&gt;

&lt;h2 id=&quot;166-네트워크-관련-신기술&quot;&gt;166 네트워크 관련 신기술&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;IoT
    &lt;ul&gt;
      &lt;li&gt;정보 통신 기술을 기반으로 실세계와 가상 세계의 다양한 사물을 인터넷으로 연결하여 서비스를 제공&lt;/li&gt;
      &lt;li&gt;유비쿼터스 : 어디서나 네트워크에 접속할 수 있는 환경&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;M2M. Machine to Machine. 사물 통신
    &lt;ul&gt;
      &lt;li&gt;무선 통신을 이용한 기계와 기계 사이의 통신&lt;/li&gt;
      &lt;li&gt;부호 분할 다중 접속(CDMA), GSM(Global System for communication), 무선 데이터 통신 등 다양한 통신망 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;모바일 컴퓨팅&lt;/li&gt;
  &lt;li&gt;클라우드 컴퓨팅
    &lt;ul&gt;
      &lt;li&gt;각종 컴퓨팅 자원을 중앙 컴퓨터에 두고 인터넷 기능을 갖는 단말기로 접속해서 사용하는 환경&lt;/li&gt;
      &lt;li&gt;사용자는 모니터, 키보드, 마우스, 통신 포트만으로 업무 수행 가능&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;그리드 컴퓨팅&lt;/code&gt; : 수 많은 컴퓨터를 하나의 컴퓨터처럼 묶어 분산 처리하는 방식. 대규모 연산에 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;모바일 클라우드 컴퓨팅
    &lt;ul&gt;
      &lt;li&gt;ICT. Informaiton and Communication Technologies&lt;/li&gt;
      &lt;li&gt;모바일 기기의 환경에 구애받지 않고 클라우드의 ICT 자원들을 제약없이 이용하는 것이 가능하다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인터클라우드 컴퓨팅
    &lt;ul&gt;
      &lt;li&gt;각기 다른 클라우드 서비스를 연동하거나 컴퓨팅 자원의 동적 할당이 가능하도록 여러 클라우드 서비스를 연결하는 기술&lt;/li&gt;
      &lt;li&gt;서비스 형태
        &lt;ul&gt;
          &lt;li&gt;대등 접속 :Peering : 클라우드 서비스 제공자 간 직접 연계하는 형태&lt;/li&gt;
          &lt;li&gt;연합 : Federation : 자원 공유를 기본으로 사용 요구량에 따른 동적 자원 할당을 지원해서 논리적으로 하나의 서비스를 제공&lt;/li&gt;
          &lt;li&gt;중개 : Intermediary : 서비스 제공자간의 직가넙적인 자원 연계 또는 단일 서비스 제공자를 통핸 중개 서비스를 제공&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메시 네트워크
    &lt;ul&gt;
      &lt;li&gt;특수 목적을 위한 새로운 방식의 네트워크 기술&lt;/li&gt;
      &lt;li&gt;대규모 디바이스의 네트워크 생성에 최적화&lt;/li&gt;
      &lt;li&gt;블루투스 SIG(블루투스 기술 표준 개발을 위한 다국적 기업 연합체)에서 메시 네트워크를 지원한다고 발표&lt;/li&gt;
      &lt;li&gt;무선 랜의 한계를 극복하기 위해 라우터들을 기지국으로 활용하여 모든 구간을 동일한 무선망처럼 구성한다. 이를 통해 사용자는 와이파이에 접속하는 것처럼 안정적인 네트워크를 사용할 수 있게 된다.&lt;/li&gt;
      &lt;li&gt;수십 수천 개의 디바이스가 유기적으로 연결되어 있어야하는 건물 자동화, 센서 네트워크 등 IoT 솔루션에 적합하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;와이선Wi-SUN
    &lt;ul&gt;
      &lt;li&gt;장거리 무선 통신을 필요로 하는 사물 인터넷 서비스를 위한 저전력 장거리 통신 기술&lt;/li&gt;
      &lt;li&gt;짧은 시간 동아 데이터 전송이 빈번한 검침 분야에 유용&lt;/li&gt;
      &lt;li&gt;낮은 지연 속도, 메시 네트워크 기반 확장성, 펌웨어 업그레이드 용이성에서 다른 저전력 통신 기술이 비해 우월하다
-최대 데이터 전송 속도 300kbps로 약 5km까지 전송 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NDN.Named Data Networking
    &lt;ul&gt;
      &lt;li&gt;콘텐츠 자체의 정보와 라우터 기능만으로 데이터 전송을 수행하는 기술&lt;/li&gt;
      &lt;li&gt;클라이언트와 서버가 패킷 헤더에 내장되어 있는 주소 정보를 이용하여 연결되넌 IP 망을 대체하는 기술&lt;/li&gt;
      &lt;li&gt;콘텐츠 중심 네트워크와 같은 개념이고, 해시 테이블에 기반을 두는 p2p 시스템과 같이 콘텐츠에 담겨 있는 정보와 라우터 기능만으로 목적지를 확정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NGN.Next Generation Network. 차세대 통신망
    &lt;ul&gt;
      &lt;li&gt;유선망 기반의 차세대 통신망&lt;/li&gt;
      &lt;li&gt;이동사용자를 목표로, 이동통신에서 지공하는 완전한 이동성 제공을 목표로 개발&lt;/li&gt;
      &lt;li&gt;하나의 망이 인터넷처럼 모든 정보와 서비스를 패킷으로 압축하여 전송한다.&lt;/li&gt;
      &lt;li&gt;보통 인터넷 프로토콜을 기반으로 구축&lt;/li&gt;
      &lt;li&gt;all-IP라는 용어는 NGN을 향한 변화를 기술하는데 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NFC. Near Field Communication. 근거리 무선 통신
    &lt;ul&gt;
      &lt;li&gt;고주파를 이용한 근거리 무선 통신 기술&lt;/li&gt;
      &lt;li&gt;아주 가까운 거리에서 양방향 통신을 지원하는 RFID 기술의 일종&lt;/li&gt;
      &lt;li&gt;10cm이내에서 최소 424Kbps의 속도&lt;/li&gt;
      &lt;li&gt;모바일 기기를 통한 결제 등에 활용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UWB.Utra WideBand. 초광대역
    &lt;ul&gt;
      &lt;li&gt;짧은 거리에서 많은 양의 데이터를 낮은 전력으로 전송하기 위한 무선 기술&lt;/li&gt;
      &lt;li&gt;= 무선 디지털 펄스.&lt;/li&gt;
      &lt;li&gt;블루투스와 비교되는 기술&lt;/li&gt;
      &lt;li&gt;0.5m/W 정도의 저전력으로 많은 양의 데이터를 1km 거리까지 전송할 수 있다.&lt;/li&gt;
      &lt;li&gt;땅 속, 벽면 뒤로도 전송이 가능. 이를 통해 지진 등 재해가 일어났을 때 전파 탐지기 기능으로 인명 구조 가능&lt;/li&gt;
      &lt;li&gt;미 국방부가 군사적 목적으로 개발 -&amp;gt; 기술의 상업적 용도 승인 이후 상용화 중&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PICONET.피코넷
    &lt;ul&gt;
      &lt;li&gt;여러 개의 독립된 통선장치가 블루투스 기술이나 UWB 통신 기술을 사용하여 통신망을 형성하는 무선 네트워크 기술&lt;/li&gt;
      &lt;li&gt;네트워크를 구성하는 장비 간에 사전에 네트워크의 정의와 계획 없이 상황에 따라 조정 프로토콜에 의하여 마스터와 슬레이브의 역할을 하며 네트워크를 형성&lt;/li&gt;
      &lt;li&gt;수십 미터 이내의 좁은 공간에서 네트워크를 형성하는 것과 정지/이동 중에 있는 장치를 모두 포함한다는 특징을 가지고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WBAN.Wireless Body Area Network
    &lt;ul&gt;
      &lt;li&gt;웨어러블 또는 몸에 심는Implant 형태의 센서나 기기를 무선으로 연결하는 개인 영역 네트워킹 기술&lt;/li&gt;
      &lt;li&gt;무선 센서나 기기로부터 수집한 정보를 휴대폰 또는 간이형 기지국을 통하여 병원이나 기타의 필요한 곳에 실시간으로 정송하는 서비스에 응용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GIS.Geographic Information System.지리 정보 시스템
    &lt;ul&gt;
      &lt;li&gt;지리적인 자료룰 수집/저장/분석/출력할 수 있는 컴퓨터 응용 시스템&lt;/li&gt;
      &lt;li&gt;위성을 이용해 모든 사물의 위치 정보를 제공해주는 것&lt;/li&gt;
      &lt;li&gt;지도에서 사물을 확인하는 단계 -&amp;gt; 다양한 매체를 통해 지리 데이터를 수집/구축/분석/처리과정을 거쳐 고품질의 공간 정보를 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;USN&lt;/code&gt;.Ubiquitous Sensor Network.유비쿼터스 센서 네트워크
    &lt;ul&gt;
      &lt;li&gt;각종 센서로 수집한 정보를 무선으로 수집할 수 있도록 구성한 네트워크&lt;/li&gt;
      &lt;li&gt;필요한 곳에 RFID 태그를 부착하고 이를 통하여 사물의 인식정보는 물론 주변의 환경 정보까지 탐지하여 정보를 관리&lt;/li&gt;
      &lt;li&gt;USN은 사람의 접근이 불가능한 취약지구에 수백 개의 센서 네트워크 노드를 설치하면 사람이 감시하는 것과 같은 효과를 얻음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SON.Self Organizing Network.자동 구성 네트워크
    &lt;ul&gt;
      &lt;li&gt;주변 상황에 맞추어 스스로 망을 구성하는 네트워크&lt;/li&gt;
      &lt;li&gt;통신망 커버리지 및 전송 용량 확장의 경제성 문제를 해결. 망의 운영과 관리의 효율성을 높이는 목표&lt;/li&gt;
      &lt;li&gt;갑작스러운 사용자의 증가나 감소 시에는 자동으로 주변 셀과의 협력을 통해 셀 용량을 변화시키며 장애가 발생했을 때 자체적인 치유&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ad-hoc Network.애드 혹 네트워크
    &lt;ul&gt;
      &lt;li&gt;재난 현장과 같이 별도의 고정된 유선망을 구출할 수 없는 장소에서 모바일 호스트만을 이용하여 구성한 네트워크&lt;/li&gt;
      &lt;li&gt;망을 구성한 후 단기간 사용되는 경우나 유선망을 구성하기 어려운 경우에 적합&lt;/li&gt;
      &lt;li&gt;유선망과 기지국이 필요 없고 호스트의 이동에 제약이 없어 빠른 망 구성과 저렴한 비용이 장점&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDN.Software Defined Networking.&lt;/code&gt; 소프트웨어 정의 네트워킹
    &lt;ul&gt;
      &lt;li&gt;네트워크를 컴퓨터처럼 모델링하여 여러 사용자가 각각의 소프트웨어들로 네트워크를 가상화하여 제어하고 관리하는 네트워크&lt;/li&gt;
      &lt;li&gt;네트워크 비용 및 복잡성을 해결할 수 있는 기술로 간주&lt;/li&gt;
      &lt;li&gt;H/W, S/W 기술을 폐쇄향에서 개방형으로 변화시키는 미래 인터넷 기술로 주목&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Network Slicing.네트워크 슬라이싱
    &lt;ul&gt;
      &lt;li&gt;3GPP : 이통통신 관련 국제 표준을 위해 각국의 통신 관련 기관이 참여하는 기술협력 기구&lt;/li&gt;
      &lt;li&gt;3GPP를 포함한 여러 글로벌 이동통신 표준화 단체가 선정한 5G의 핵심 기술 중 하나&lt;/li&gt;
      &lt;li&gt;네트워크에서 하나의 물리적인 코어 네트워크 인프라를 독립도니 다수의 가상 네트워크로 분리하여 각각의 네트워크를 통해 다양한 고객 맞춤형 서비스를 제공하는 것이 목적&lt;/li&gt;
      &lt;li&gt;1인칭 VOD, 자율주행 자동차 등 서비스를 1개의 물리적인 네트워크로 구성하는 것은 한계가 있어 네트워크 슬라이싱 기술이 5G 네트워크를 구현하는데 중요한 핵심 기술이 됨&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;소프트웨어 정의 네트워킹SDN&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;네트워크 기능 가상화NFV&lt;/code&gt; 구현이 선행되어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BLE.Bluetooth Low Energy. 저전력 블루투스 기술
    &lt;ul&gt;
      &lt;li&gt;일반 블루투스와 동일한 2.4GHz 주파수 대역을 사용하지만 연결되지 않은 대기 상태에서는 절전 모드를 유지하는 기술&lt;/li&gt;
      &lt;li&gt;주소 낮은 전력으로 저용량 데이터를 처리하는 시계 장난감 비컨 등 극소형 사물 인터넷에 매우 적합&lt;/li&gt;
      &lt;li&gt;전력 효율이 좋아 베터리 하나로 몇 년을 사용할 수 있으므로 비용면에서도 매우 효율적이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;지능형 초연결망
    &lt;ul&gt;
      &lt;li&gt;과학기술정보통신부 주관으로 추진 중인 사업&lt;/li&gt;
      &lt;li&gt;스마트 시티, 스마트 스테이션 등 4차 산업 혁명 시대를 맞아 새로운 변화에 따라 증가하는 데이터 트래픽을 수용하기 위한 정부 주관 사업&lt;/li&gt;
      &lt;li&gt;SDE소트트웨어 defiend Everything. : 네트워크, 데이터 센터 등에서 소유한 자원을 가상화하여 개별 사용자에게 제공하고, 중앙에서는 통합적으로 제어가 가능한 기술&lt;/li&gt;
      &lt;li&gt;국가 전체 망에 소프으퉤어 정의 기술 SDE을 적용하는 방법으로 네트워크의 데이터 트래픽 증가를 불어올 수 있는 사물 인터넷, 클라우드, 빅데이터, 5G 등을 효율적으로 수용할 수 있도록 한다.&lt;/li&gt;
      &lt;li&gt;기존의 초고석정보통신망, 광대역 통합망, 광대역 융합망을 잇는 중장기 네트워크 발전 전략이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;167-네트워크-구축&quot;&gt;167 네트워크 구축&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;통신망은Communication Network 정보를 전달하기 위해서 통신 규약에 의해 연결한 통신 설비의 집합&lt;/li&gt;
  &lt;li&gt;네트워크 설치 구조는 통신망을 구성하는 요소들을 공간적으로 배치하는 방법&lt;/li&gt;
  &lt;li&gt;장치들의 물리적인 위치에 따라서 성형, 링형, 버스형, 계층형, 망형으로 나누어 진다.&lt;/li&gt;
  &lt;li&gt;성형Star, 중앙 집중형
    &lt;ul&gt;
      &lt;li&gt;중앙에 중앙컴퓨터가 있고, 이를 중심으로 단말장치들이 연결되는 중앙 집중식의 네트워크 구성 형태&lt;/li&gt;
      &lt;li&gt;point to point 방식으로 회선을 연결한다&lt;/li&gt;
      &lt;li&gt;각 단말장치들은 중앙 컴퓨터를 통하여 데이터를 교환한다.&lt;/li&gt;
      &lt;li&gt;단말장치의 추가와 제거가 쉽다&lt;/li&gt;
      &lt;li&gt;하나의 단말장치가 고장나더라도 다른 단말 장치에는 영향을 주지 않지만, 중앙 컴퓨터가 고장나면 전체 통신망의 기능이 정지된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;링형,Ring. 루프형
    &lt;ul&gt;
      &lt;li&gt;컴퓨터와 단말장치들을 서로 이웃하는 것끼리 point to point 방식으로 연결시킨 형태이다.&lt;/li&gt;
      &lt;li&gt;분산 및 집중 제어 모두 가능하다&lt;/li&gt;
      &lt;li&gt;단말장치의 추가/제거 및 기밀 보호가 어렵다&lt;/li&gt;
      &lt;li&gt;각 단말장치에서 전송 지연이 발생할 수 있다.&lt;/li&gt;
      &lt;li&gt;중계기의 수가 많아진다.&lt;/li&gt;
      &lt;li&gt;데이터는 단방향 또는 양방향으로 전송될 수 있다. 단방향의 경우 컴퓨터,단말장치, 통신회선 중 어느 하나라도 고장나면 전체 통신망에 영향을 미친다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;버스형(Bus)
    &lt;ul&gt;
      &lt;li&gt;버스형은 한 개의 통신 회선에 여러 대의 단말장치가 연결되어 있는 형태이다.&lt;/li&gt;
      &lt;li&gt;물리적인 구조가 간단하고 단말장치의 추가와 제거가 용이하다.&lt;/li&gt;
      &lt;li&gt;단말장치가 고장나더라도 통신망 전체에 영향을 주지 않지 때문에 신뢰성을 높일 수 있다.&lt;/li&gt;
      &lt;li&gt;기밀 보장이 어렵고 통신 회선의 길이에 제한이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;계층형 Tree
    &lt;ul&gt;
      &lt;li&gt;중앙 컴퓨터와 일정 지역의 단말장치까지는 하나의 통신회선으로 연결시키고, 이웃하는 단말장치는 일정 지역 내에 설치된 중간 단말장치로부터 다시 연결시키는 형태이다.&lt;/li&gt;
      &lt;li&gt;분산 처리 시스템을 구성하는 방식&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;망형Mesh
    &lt;ul&gt;
      &lt;li&gt;모든 컴퓨터와 단말장치를 서로 연결한 형태로 노드의 연결성이 높다.&lt;/li&gt;
      &lt;li&gt;많은 단말자이로부터 많은 양의 통신을 필요로 하는 경우에 유리하다.&lt;/li&gt;
      &lt;li&gt;보통 공중 데이터 통신망에서 사용되며, 통신 회선의 총 경로가 가장 길다.&lt;/li&gt;
      &lt;li&gt;통신 회선 장애 시 다른 경로를 통하여 데이터를 전송할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;분류
    &lt;ul&gt;
      &lt;li&gt;근거리 통신망LAN. Local Area Network : 가까운 거리에서 같은 자원을 연결해서 구성. 자원 공유 목적.
        &lt;ul&gt;
          &lt;li&gt;데이터 전송 속도가 빠르고 에러 발생률이 낮다.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;버스형&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;링형&lt;/code&gt; 구조를 주로 사용한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;광대역 통신망WAN. Wide Area Network
        &lt;ul&gt;
          &lt;li&gt;국가간 대륙간 네트워크&lt;/li&gt;
          &lt;li&gt;통신 속도가 느리고 에러 발생률이 높다.&lt;/li&gt;
          &lt;li&gt;일정한 지역에 있는 사이트들을 근거리 통신망으로 연결한 후 각 근거리 통신망을 연결하는 방식으로 사용한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;168-스위치&quot;&gt;168 스위치&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;LAN과 LAN을 연결해서 더 큰 LAN을 만드는 장치&lt;/li&gt;
  &lt;li&gt;OSI 7 계층의 layer에 따라 L2, L3, L4, L7으로 분류
    &lt;ul&gt;
      &lt;li&gt;L2
        &lt;ul&gt;
          &lt;li&gt;OSI의 2계층에 속하는 장비&lt;/li&gt;
          &lt;li&gt;일반적으로 부르는 스위치는 L2&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAC 주소를 기반&lt;/code&gt;으로 프레임을 전송&lt;/li&gt;
          &lt;li&gt;동일 네트워크 간의 연결만 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;L3
        &lt;ul&gt;
          &lt;li&gt;OSI의 3계층에 속하는 장비&lt;/li&gt;
          &lt;li&gt;L2 스위치에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;라우터 기능이 추가&lt;/code&gt;된 것으로 IP주소를 기반으로 패킷을 전송&lt;/li&gt;
          &lt;li&gt;서로 다른 네트워므 간의 연결이 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;L4
        &lt;ul&gt;
          &lt;li&gt;OSI 계층의 4계층에 속하는 장비&lt;/li&gt;
          &lt;li&gt;로드밸런서가 달린 L3 스위치.&lt;/li&gt;
          &lt;li&gt;IP주소 및 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP/UDP를 기반&lt;/code&gt;으로 사용자들의 요구를 서버의 부하가 적은 곳에 배분한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;L7
        &lt;ul&gt;
          &lt;li&gt;OSI 계층의 7계층에 속하는 장비&lt;/li&gt;
          &lt;li&gt;IP 주소, TCP/UDP 포트 정보에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;패킷 내용까지 참조&lt;/code&gt;하여 세밀하게 로드밸런싱한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스위칭 방식
    &lt;ul&gt;
      &lt;li&gt;Store and Forwarding : 데이터를 모두 받은 후 스위칭하는 방식&lt;/li&gt;
      &lt;li&gt;Cut-through : 데이터의 목적 주소만을 확인한 후 바로 스위칭하는 방식&lt;/li&gt;
      &lt;li&gt;Fragment Free : 두 가지 방식의 장점을 결합한 방식&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;백본 스위치Backbone Switch
    &lt;ul&gt;
      &lt;li&gt;백본 : 여러 네트워크들을 연결할 때 중추적 역할을 하는 네트워크&lt;/li&gt;
      &lt;li&gt;백본에서 스위칭 역할을 하는 장비를 백본 스위치라고 한다&lt;/li&gt;
      &lt;li&gt;백본 스위치는 모든 패킷이 지나가는 네트워크의 중심에 배치한다.&lt;/li&gt;
      &lt;li&gt;대규모 트래픽을 처리하려면 고성능의 백본 스위치를 사용해야 한다.&lt;/li&gt;
      &lt;li&gt;주로 L3 스위치가 백본 스위치의 역할을 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hierarchical 3 Layer 모델
    &lt;ul&gt;
      &lt;li&gt;엑세스 계층
        &lt;ul&gt;
          &lt;li&gt;사용자가 네트워크에 접속할 때 최초로 연결되는 지점으로 사용자들로부터 오는 통신을 집약해서 디스트리뷰션 계층으로 전송&lt;/li&gt;
          &lt;li&gt;엑세스 계층에 배치되는 장비의 성능은 낮아도 되지만 포트수는 사용자수만큼 있어야 한다.&lt;/li&gt;
          &lt;li&gt;L2 스위치를 사용한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Distribution ㄱㅖ층
        &lt;ul&gt;
          &lt;li&gt;액세스 계층의 장비들이 연결되는 지점으로, 액세스 계층에서 오는 통신을 집약해서 코어 계층으로 전송한다.&lt;/li&gt;
          &lt;li&gt;LAN 간에 라우팅 기능을 수행한다.&lt;/li&gt;
          &lt;li&gt;라우터, L3 스위치를 사용한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Core 계층
        &lt;ul&gt;
          &lt;li&gt;디스트리뷰션 계층에서 오는 통신을 집약해 인터넷에 연결하는 계층으로, 백본 계층이라고 한다.&lt;/li&gt;
          &lt;li&gt;전자우편, 인터넷 접속, 화상 회의 등의 기능을 수행&lt;/li&gt;
          &lt;li&gt;백본 스위치를 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;169-경로-제어--트레픽-제어&quot;&gt;169 경로 제어 / 트레픽 제어&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;경로 제어는 송. 수신 측 간의 전송 경로 중에서 최적 패킷 교환 경로를 결정하는 기능&lt;/li&gt;
  &lt;li&gt;최적 패킷 경로 : 어느 한 경로에 데이터의 양이 집중하는 것을 피하면서, 최저의 비용으로 최단 시간에 송신할 수 있는 경로&lt;/li&gt;
  &lt;li&gt;경로 제어 요소 : 성능 기준/경로 결정 시간과 장소/정보 발생지/ 경로 정보의 갱신 시간&lt;/li&gt;
  &lt;li&gt;경로 제어 프로토콜Routing Protocol
    &lt;ul&gt;
      &lt;li&gt;효율적인 경로 제어를 위해 네트워크 정보를 생성, 교환, 제어하는 프로토콜을 총징&lt;/li&gt;
      &lt;li&gt;IGP Interior Gateway Protocol 내부 게이트웨이 프로토콜
        &lt;ul&gt;
          &lt;li&gt;하나의 자율 시스템 내의 라우팅에 사용되는 프로토콜&lt;/li&gt;
          &lt;li&gt;RIP. Routing Information Protocol
            &lt;ul&gt;
              &lt;li&gt;가장 널리 쓰임&lt;/li&gt;
              &lt;li&gt;소규모 동종 네트워크에서 효율적&lt;/li&gt;
              &lt;li&gt;Hop : 데이터가 목적지까지 전달되는 과정에서 거치는 네트워크의 수.&lt;/li&gt;
              &lt;li&gt;최대 홉Hop 수를 15로 제한하므로 15 이상의 경우는 도달할 수 없음. 즉, 대규모에서 RIP 사용 불가&lt;/li&gt;
              &lt;li&gt;라우팅 정보를 30초마다 네트워크 내의 모든 라우터에게 알리며, 180초 이내에 새로운 라우팅 정보가 수신되지 않으면 해당 경로를 이상 상태로 간주한다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;OSPF. Open Shortest Path First Protocol
            &lt;ul&gt;
              &lt;li&gt;대규모 네트워크에서 사용&lt;/li&gt;
              &lt;li&gt;라우팅 정보에 변화가 생길 경우, 변화된 정보만 네트워크 내의 모든 라우터에게 알린다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;EGP Exterior Gateway Protocol 외부 게이트웨이 프로토콜
        &lt;ul&gt;
          &lt;li&gt;자율 시스템 간의 라우팅&lt;/li&gt;
          &lt;li&gt;게이트웨이 간의 라우팅에 사용되는 프로토콜&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;BGP Border Gateway Protocol
        &lt;ul&gt;
          &lt;li&gt;자율 시스템 간의 라우팅 프로토콜로, EGP의 단점을 보완하기 위해 만들어짐&lt;/li&gt;
          &lt;li&gt;초기에 BGP 라우터들이 연결될 때에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;전체 경로 제어표&lt;/code&gt;를 교환하고, 이후에는 변화된 정보만 교환&lt;/li&gt;
          &lt;li&gt;라우팅 테이블을 전달하는데 주로 이용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;트래픽 제어 Trffic Control: 네트워크의 보호, 성능 유지 등을 위해 전송되는 패킷의 흐름 또는 그 양을 조절하는 방법
    &lt;ul&gt;
      &lt;li&gt;흐름제어
        &lt;ul&gt;
          &lt;li&gt;네트워크 내의 원활한 흐름을 위해 송/수신 측 사이에 전송되는 패킷의 양이나 속도를 규제하는 기능&lt;/li&gt;
          &lt;li&gt;송신 측과 수신 측 간의 처리 속도 또는 버퍼의 크기의 차이에 의해 생길 수 있는 수신측 버퍼의 오버 플로를 방지하기 위한 기능&lt;/li&gt;
          &lt;li&gt;종류
            &lt;ul&gt;
              &lt;li&gt;정지-대기
                &lt;ul&gt;
                  &lt;li&gt;수신 측의 확인 신호를 받은 후에 다음 패킷을 전송하는 방식&lt;/li&gt;
                  &lt;li&gt;한 번에 하나의 패킷만 전송할 수 있다.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;슬라이딩 윈도우
                &lt;ul&gt;
                  &lt;li&gt;확인 신호를 이용하여 송신 데이터의 양을 결정&lt;/li&gt;
                  &lt;li&gt;수신 측의 확인 신호르 받지 않더라도 미리 정해진 패킷의 수 만큼 연속적으로 전송&lt;/li&gt;
                  &lt;li&gt;수신 측의 확인 신호를 받지 않더라도 미리 보낼 수 있는 패킷의 최대치를 약속 = window size&lt;/li&gt;
                  &lt;li&gt;window size는 상황에 따라 변한다. 즉, 수신 측으로부터 이전에 송신한 패킷에 대한 ACK이 전송된 경우 중가하고, NAK을 받은 경우 윈도우 크기를 줄인다.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;혼잡제어
        &lt;ul&gt;
          &lt;li&gt;흐름제어는 송수신측 사이의 패킷 수를 제어하는 기능&lt;/li&gt;
          &lt;li&gt;혼잡제어는 ㅔ트워크 내의 패킷 수를 조절하여 네트워크의 오버플로를 방지하는 기능
            &lt;ul&gt;
              &lt;li&gt;느린 시작. Slow Start : 윈도우 크기가 1,2,4,8 과 같이 2배씩 지수적으로 증가시켜 초기에는 느리지만 갈수록 빨라진다.
                &lt;ul&gt;
                  &lt;li&gt;전송 데이터의 크기가 임계값에 도닳면 혼잡 회피 단계로 넘어간다.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;혼잡 회피. Congestion Avoidance
                &lt;ul&gt;
                  &lt;li&gt;느린 시작의 지수적 증가가 임계값에 도달하면 혼잡으로 간주하고 회피를 위해 위도우 크기를 1씩 선형적으로 증가시켜 혼잡을 예방한다.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;교착상태 방지Dead Lock
        &lt;ul&gt;
          &lt;li&gt;교환기 내에 패킷들을 축적하는 기억 공간이 꽉 차 있을 때 다음 패킷들이 기억 공간에 들어가기 위해 무한정 기다리는 현상을 말한다.&lt;/li&gt;
          &lt;li&gt;패킷이 같은 목적지를 갖지 않도록 할당하고, 교착상태 발생시에는 교착 상태에 있는 한 단말장치를 선택하여 패킷 버퍼를 폐기한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;170-sw-관련-신기술&quot;&gt;170 SW 관련 신기술&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;인공지능
    &lt;ul&gt;
      &lt;li&gt;스스로 추론/학습/판단하는 시스템&lt;/li&gt;
      &lt;li&gt;응용분야 : 신경망/퍼지/패턴 인식/전문가 시스템/자연어 인식/ 이미지 처리/ 컴퓨터 시각/ 로봇 공학&lt;/li&gt;
      &lt;li&gt;개발 언어 : 리스프LISP, 프롤로그PROLOP&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;뉴럴링크
    &lt;ul&gt;
      &lt;li&gt;일론머스크가 사람의 뇌와 컴퓨터를 결합하는 기술을 개발하기 위해 설립한 회사&lt;/li&gt;
      &lt;li&gt;신경 레이스 : 개발 중 : 작은 전극을 뇌에 이식함으로써 생각을 업로드하고 다운로드하는 것이 목표&lt;/li&gt;
      &lt;li&gt;피질 직결 인터페이스 : 사람이 인공지능에 대항할 수 있는 더 높은 수준의 기능에 도달하도록 컴퓨터와 뇌를 연결한다는 개념&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;딥 러닝
    &lt;ul&gt;
      &lt;li&gt;인공 신경망Artificail NN를 기반으로하는 기계 학습 기술&lt;/li&gt;
      &lt;li&gt;정형화된 데이터가 아닌 스스로 필요한 데이터를 수집 및 분석&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;전문가 시스템
    &lt;ul&gt;
      &lt;li&gt;의료 진단과 같은 특정 분야의 전문가가 수행하는 고도의 업무를 지원하기 위한 시스템&lt;/li&gt;
      &lt;li&gt;인간의 지적활동과 경험을 통해서 축적된 전문가의 지식과 추론 규칙을 활용하여 결정을 내리거나 문제를 해결&lt;/li&gt;
      &lt;li&gt;지식베이스라는 DB와 이에 기반한 추론기구가 구성요소&lt;/li&gt;
      &lt;li&gt;구체적인 사실을 지식베이스가 제공 + 추론 기구는 시스템의 결론 도출 능력 제공&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;증강현실
    &lt;ul&gt;
      &lt;li&gt;실제 촬영한 화면에 가상의 정보를 부가하여 보여주는 기술&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;블록체인
    &lt;ul&gt;
      &lt;li&gt;P2P 네트워크를 통해 온라인 금융 거래 정보를 온라인 네트워크Peer의 디지털 장비에 분산 저장하는 기술&lt;/li&gt;
      &lt;li&gt;P2P를 기반으로 일정 시간 동안 절반 이상의 디지털 장비에 저장된 거래 내역을 서로 교환/확인/승인하는 과정을 거쳐 하나의 블록으로 만듦&lt;/li&gt;
      &lt;li&gt;블록은 기존의 블록체인에 연결되고 다시 복사되어 각 사용자의 장비에 저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;분산 원장 기술
    &lt;ul&gt;
      &lt;li&gt;Distributed Ledger Technology&lt;/li&gt;
      &lt;li&gt;중앙 관리자나 중아 데이터 저장소가 존재하지 않고 P2P 망 내의 참여자들에게 모든 거래 목록이 분산 저장되어 거래가 발생할 때마다 지속적으로 갱신되는 디지털 원장&lt;/li&gt;
      &lt;li&gt;대표 사례가 블록체인&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;해시
    &lt;ul&gt;
      &lt;li&gt;데이터의 무결성 검증&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;양자 암호키 분배
    &lt;ul&gt;
      &lt;li&gt;Quantum key Distrbution&lt;/li&gt;
      &lt;li&gt;양자 통신을 위해 비밀키를 분배하여 관리하는 기술&lt;/li&gt;
      &lt;li&gt;두 시스템이 암호 알고리즘 동작을 위한 비밀키를 안전하게 공유하기 위해 양자 암호키 분배 시스템을 설치하여 운용하는 방식으로 활용&lt;/li&gt;
      &lt;li&gt;키 분배를 위해 얽임 상태광자 또는 단일 광자를 이용한 방법이 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프라이버시 강화 기술
    &lt;ul&gt;
      &lt;li&gt;Privacy Enhancing Technology&lt;/li&gt;
      &lt;li&gt;개인정보 위험 관리 기술&lt;/li&gt;
      &lt;li&gt;최근 심각한 위험으로 대두되고 있는 개인정보 침해 위험을 관리하기 위한 기술 통칭&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;디지털 저작권 관리
    &lt;ul&gt;
      &lt;li&gt;Digital Rights Management&lt;/li&gt;
      &lt;li&gt;저작권 보호, 데이터 안전 배포를 위한 시스템&lt;/li&gt;
      &lt;li&gt;데이터를 암호화하여 인증도니 사용자만이 접속할 수 있에 하거나, 디지털 워터마크의 사용 등을 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공통 평가 기준
    &lt;ul&gt;
      &lt;li&gt;Common Criteria&lt;/li&gt;
      &lt;li&gt;1999년 ISO 표준으로 채택된 정보 보호 제품 평가 기준&lt;/li&gt;
      &lt;li&gt;정보화 순기능 역할을 보장하기 위해 정보화 제품의 정보보호 기능과 이에 대한 사용 환경 등급을 정한 기준&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;개인정보 영향평가 제도
    &lt;ul&gt;
      &lt;li&gt;Privact Impact Assessment&lt;/li&gt;
      &lt;li&gt;미리 조사 분석 평가하는 제도&lt;/li&gt;
      &lt;li&gt;공공기관은 의무화되어 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그레어웨어
    &lt;ul&gt;
      &lt;li&gt;Grayware&lt;/li&gt;
      &lt;li&gt;제공자 입장에서는 비악의적, 사용자 입장에서는 유용할수도 있고 악의적일 수도 있는 애드웨어,트랙웨어, 기타 악성코드 들&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;매시업
    &lt;ul&gt;
      &lt;li&gt;웹에서 제공하는 정보 및 서비스를 이용하여 새로운 소프트웨어나 서비스, DB를 만든느 기술&lt;/li&gt;
      &lt;li&gt;다수의 정보원이 제공하는 컨텐츠를 조합하여 하나의 서비스로 제공하는 웹 사이트 또는 앱&lt;/li&gt;
      &lt;li&gt;구글 지도 위에 부동산 정보를 추가한 구글의 하우징맵스가 대표적인 매시업&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;리치 인터넷 애플리케이션
    &lt;ul&gt;
      &lt;li&gt;Rich Internet Application&lt;/li&gt;
      &lt;li&gt;플래시 애니메이션 기술 + 웹 서버 앱 기술&lt;/li&gt;
      &lt;li&gt;Flash와 Flex 같은 멀티미디어 도구와 DB가 연동되는 단일 인터페이스를 통해 만듦&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;시맨틱 웹
    &lt;ul&gt;
      &lt;li&gt;새로운 정ㅇ보를 만들어 이해하기 쉬운 의미를 가진 지능형 웹&lt;/li&gt;
      &lt;li&gt;핵심 기술
        &lt;ul&gt;
          &lt;li&gt;자원 서술 기술 : 웹 자원을 서술하기 위함&lt;/li&gt;
          &lt;li&gt;지식 서술 기술 : Ontology(인간과 컴퓨터가 정보를 이해할 수 있도록하는 단어-관계의 사전)를 통한 지식 서술&lt;/li&gt;
          &lt;li&gt;Agent 기술 : 통합적으로 운영하기 위한 기술&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;증발품
    &lt;ul&gt;
      &lt;li&gt;판매 계획 배포 계획은 있는데 실제로 판매 배포가 안된 것&lt;/li&gt;
      &lt;li&gt;Vaporware&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;오픈 그리드 서비스 아키텍쳐
    &lt;ul&gt;
      &lt;li&gt;앱 공유를 위한 우베 서비스를 그리드 상에서 제공하기 위해 만든 개방형 표준&lt;/li&gt;
      &lt;li&gt;그리드 : 한 번에 한 곳만 연결할 수 있던 WWW와 달리 동시에 여러 곳에 연결할 수 있는 망 구조&lt;/li&gt;
      &lt;li&gt;글로벌 그리그 포럼이 개발을 주도하고, 웹 서비스 표준을 적극적으로 따르고 기존의 웹 개발 툴들을 그대로 사용할 수 있게함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서비스 지향 아키텍쳐
-서비스 단위, 컴포넌트 중심으로 구축하는 정보기술 아키텍쳐
    &lt;ul&gt;
      &lt;li&gt;누구나 이용 가능한 서비스로 간주하고 연동과 통합을 전제로 아키텍쳐를 구축&lt;/li&gt;
      &lt;li&gt;SOA의 예인 SOAP(단수 객체 접근 프로토콜) 기반 웹서비스에서는 이용자들이 서로 다른 방식으로 의사소통을 하면서도 통합 관리되는 서비스들을 사용할 수 있다.&lt;/li&gt;
      &lt;li&gt;기존 개념에 이벤트 기반 아키텍쳐를 더해 비즈니스에서 발생하는 상황을 실시간으로 처리하는 SOA 2.0을 도입 중&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서비스형 소프트웨어
    &lt;ul&gt;
      &lt;li&gt;SaaS. Software as a Service&lt;/li&gt;
      &lt;li&gt;소프트웨어의 여러 기능 중에서 사용자가 필요로하는 서비스만 이용할 수 있도록 한 소프트웨어&lt;/li&gt;
      &lt;li&gt;공급 업체가 하나의 플랫폼을 이용해 다수의 고객에게 서비스를 제공하고, 사용자는 이용한 만큼 돈을 지급한다.&lt;/li&gt;
      &lt;li&gt;소유? : 기존 기업용 SW는 기업 내부의 서버 등에 저장되어 고객이 소유권을 갖지만, SaaS는 제품이 아닌 서비스(빌려 쓰는 제품)이라는 점에서 기존 라이센스 모델과 구분된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;소프트웨어 에스크로(임치)
    &lt;ul&gt;
      &lt;li&gt;Software Ecrow&lt;/li&gt;
      &lt;li&gt;소프트웨어 개발자의 지식재산권을 보호하고 사용자는 저렴한 비용으로 소프트웨어를 안정적으로 사용 및 유지보수 받을 수 있도록 소스 프로그램과 기술 정보 등을 제3의 기관에 보관하는 것&lt;/li&gt;
      &lt;li&gt;목적 : 저작재산권자의 지식재산권 보호. 폐업, 파산, 정보 멸실등의 사건이 발생했을 때 SW 사용 권한이 있는 사용자에게 보관도니 자료를 제공하는 등 사용자의 권리를 보장하는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;복잡 이벤트 처리
    &lt;ul&gt;
      &lt;li&gt;CEP. Complex Event Processing&lt;/li&gt;
      &lt;li&gt;실시간으로 발생하는 많은 사건들 중 의미가 있는 것만들 추출할 수 있도록 사건 발생 조건을 정의하는 데이터 처리 방법&lt;/li&gt;
      &lt;li&gt;대용량 스트림에 대한 요구에 실시간으로 대응하기 위한 기술&lt;/li&gt;
      &lt;li&gt;미들웨어에 접목시키면 기업이 독자적인 실시간 응용 앱을 갭라할 수 있도록 도와준다.&lt;/li&gt;
      &lt;li&gt;미들웨어 : OS와 OS에 의해 실행되는 프로그램 사이에서 SO가 제공하는 서비스 이외에 추가적인 서비스를 제공하는 SW&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;디지털 트윈
    &lt;ul&gt;
      &lt;li&gt;현실 속의 사물을 SW로 가상화한 모델.&lt;/li&gt;
      &lt;li&gt;현실 속의 사물을 대신해 다양한 상황을 모의실험하기 위한 용도로 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;171-소프트웨어-개발-보안&quot;&gt;171 소프트웨어 개발 보안&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;일련의 보안 활동&lt;/li&gt;
  &lt;li&gt;목표 : 기밀성, 무결성, 가용성 유지&lt;/li&gt;
  &lt;li&gt;소프트웨어 개발 생명 주기SDLC.의 각 단계마다 보안 활동을 수행한다.&lt;/li&gt;
  &lt;li&gt;보안 관련 기관
    &lt;ul&gt;
      &lt;li&gt;행정안전부 : 보안 정책 총괄, 법규/지침/제도 정비, 보안 약점 진단가 양성&lt;/li&gt;
      &lt;li&gt;한국인터넷진흥원(KISA) : 보안 정책 및 가이드 개발&lt;/li&gt;
      &lt;li&gt;소프트웨어 개발 보안에 대한 기술을 지원하고,&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Niklas Jang</name></author><category term="EIP" /><summary type="html">2장 IT 프로젝트 정보시스템 구축</summary></entry><entry><title type="html">[자격증][정처기] 3과목 데이터베이스 구축 - 2</title><link href="http://localhost:4000/eip/EIP-Subject-3-2/" rel="alternate" type="text/html" title="[자격증][정처기] 3과목 데이터베이스 구축 - 2" /><published>2020-08-08T00:00:00+09:00</published><updated>2020-08-08T00:00:00+09:00</updated><id>http://localhost:4000/eip/EIP-Subject-3-2</id><content type="html" xml:base="http://localhost:4000/eip/EIP-Subject-3-2/">&lt;h1 id=&quot;2장-물리-데이터베이스-설계&quot;&gt;2장 물리 데이터베이스 설계&lt;/h1&gt;

&lt;h2 id=&quot;85-사전-조사-분석&quot;&gt;85 사전 조사 분석&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;논리적 구조로 표현된 논리적 DB를 디스크 등의 물리적 저장장치에 저장할 수 있는 물리적 구조의 데이터로 변환하는 과정&lt;/li&gt;
  &lt;li&gt;물리적 DB 구조의 기본적인 데이터 단위는 저장 레코드이다.&lt;/li&gt;
  &lt;li&gt;반드시 포함되어야 하는 요소
    &lt;ol&gt;
      &lt;li&gt;저장 레코드의 양식 설계&lt;/li&gt;
      &lt;li&gt;Record Clustering의 분석 및 설계&lt;/li&gt;
      &lt;li&gt;접근 경로 설계&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;여러 가지 타입의 저장 레코드 집합이라는 면에서 단순한 파일과 다르다.&lt;/li&gt;
  &lt;li&gt;고려 사항
    &lt;ol&gt;
      &lt;li&gt;인덱스 구조&lt;/li&gt;
      &lt;li&gt;레코드 크기&lt;/li&gt;
      &lt;li&gt;파일에 존재하는 레코드 갯수&lt;/li&gt;
      &lt;li&gt;파일에 대한 트랜잭션(논리적 기능을 수행하기 위한 작업 단위. 한 번에 모두 수행되어야하는 일련의 연산들)의 갱신과 참조 성향&lt;/li&gt;
      &lt;li&gt;성능 향상을 위한 개념 스키마의 변경 여부 ㄱ ㅓㅁ토&lt;/li&gt;
      &lt;li&gt;빈번한 질의와 트랜잭션들의 수행속도를 높이기 위한 고려&lt;/li&gt;
      &lt;li&gt;시스템 운용 시 파일 크기의 변화 가능성&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;물리적 설계 옵션 : 특정 DBMS에서 제공되는 것으로 DB 파일에 대한 저장 구조와 접근 경로에 대한 다양한 옵션
    &lt;ol&gt;
      &lt;li&gt;반응시간 : 트랜잭션 수행을 요구한 시점부터 처리 결과를 얻을 때까지의 경과 시간&lt;/li&gt;
      &lt;li&gt;공간 활용도 : DB 파일과 액세스 경로 구조에 의해 사용되는 저장 공간의 양&lt;/li&gt;
      &lt;li&gt;트랜잭션 처리량 : 단위 시간 동안 DB 시스템에 의해 처리될 수 있는 평균 수&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 명명 규칙 파악
    &lt;ul&gt;
      &lt;li&gt;예시1. 업무코드는 업쿠모드 3자리, 세부 업무코드 3자리로 구성된다.&lt;/li&gt;
      &lt;li&gt;데이터 표준화 및 논리 DB 설계의 결과물 등을 통해 파악한다.&lt;/li&gt;
      &lt;li&gt;논리적 데이터 요소를 물리적 데이터 요소로 전환할 때 동일 명칭 부여의 근거로 사용된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 사전(데이터 용어 사전) : 전체 프로젝트 관리에서 일관성 있는 데이터 이름과 인터페이스를 제공하기 위해 데이터 속성의 논리명, 물리명, 용어 정의를 기술해 놓은 것. 명칭 부여의 근거로 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;86-데이터-베이스-저장-공간-설계&quot;&gt;86 데이터 베이스 저장 공간 설계&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스의 모든 데이터는 테이블에 저장된다.&lt;/li&gt;
  &lt;li&gt;테이블 = 로우 + 컬럼&lt;/li&gt;
  &lt;li&gt;테이블 종류
    &lt;ol&gt;
      &lt;li&gt;일반 테이블 : 저장되는 데이터의 row 위치는 데이터가 저장되는 순서에 따른다.&lt;/li&gt;
      &lt;li&gt;클러스터드 인덱스 테이블 : PK나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;인덱스 키&lt;/code&gt;의 순서에 따라서 데이터가 저장된다.&lt;/li&gt;
      &lt;li&gt;파티셔닝 테이블 : 대용량의 테이블을 작은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;논리적&lt;/code&gt; 단위인 파티션으로 나눈다.
        &lt;ul&gt;
          &lt;li&gt;범위 분할(지정 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;열&lt;/code&gt;의 값을 기준)&lt;/li&gt;
          &lt;li&gt;해시 분할(해시 함수의 결과 값을 기준)&lt;/li&gt;
          &lt;li&gt;조합 분할(범위 분할+해시분할)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;외부 테이블 : DB에서 일반 테이블처럼 이용할 수 있는 외부 파일. DB 내에 객체로 존재한다.
        &lt;ul&gt;
          &lt;li&gt;데이터웨어하우스와 ETL의 작업에 유용하게 사용된다.&lt;/li&gt;
          &lt;li&gt;데이터 웨어하우스 : 주요 업무 시스템에서 추출되어 의사결정지원 시스템을 지원하는 데이터의 집합&lt;/li&gt;
          &lt;li&gt;ETL : Extraction, Transformation, Loading&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;임시 테이블 : 트랜잭션이나 세션별로 데이터를 저장하고 처리하는 테이블.
        &lt;ul&gt;
          &lt;li&gt;트랜잭션이 종료되면 삭제된다. 절차적인 처리를 위한 임시 사용 공간&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;컬럼
    &lt;ul&gt;
      &lt;li&gt;컬럼 비교 연산에서 컬럼의 데이터 타입,길이가 다르면 DBMS 내부적으로 데이터 타입을 변환한 후 비교 연산을 수행한다.&lt;/li&gt;
      &lt;li&gt;참조 관계인 컬럼들은 데이터 타입,길이가 일치해야 한다.&lt;/li&gt;
      &lt;li&gt;길이 : 가변길이(예상되는 최대 길이로 정의), 고정 길이(최소 길이로 지정)&lt;/li&gt;
      &lt;li&gt;타입에 따른 물리적 순서
        &lt;ol&gt;
          &lt;li&gt;앞쪽 : 고정 길이 컬럼 + not null&lt;/li&gt;
          &lt;li&gt;뒤쪽 : 가변 길이 컬럼&lt;/li&gt;
          &lt;li&gt;뒤쪽 : Null 값이 많을 것으로 예상되는 컬럼&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테이블 스페이스 : 테이블이 저장되는 논리적인 영역
    &lt;ul&gt;
      &lt;li&gt;하나의 테이블 스페이스에 하나 또는 그 이상의 테이블을 저장할 수 있다.&lt;/li&gt;
      &lt;li&gt;테이블 저장 = 논리적으로는 테이블스페이스에 저장 + 물리적으로는 해당 테이블스페이스와 연관된 데이터 파일에 저장&lt;/li&gt;
      &lt;li&gt;데이터베이스 = 테이블 + 테이블스페이스 + 데이터 파일 (물리적 구성에 종속되지 않는 투명성)&lt;/li&gt;
      &lt;li&gt;대용량 테이블은 하나의 테이블스페이스에 독립적으로 저장&lt;/li&gt;
      &lt;li&gt;Large Object(LOB) 타입의 데이터는 독립적인 공간으로 저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;87-트랜잭션-분석--crud-분석&quot;&gt;87 트랜잭션 분석 / CRUD 분석&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션 : DB의 상태를 변환시키는 하나의 논리적 기능을 수행하기 위한 작업의 단위. 한번에 모두 수행되어야 할 일련의 연산들&lt;/li&gt;
  &lt;li&gt;ACID
    &lt;ul&gt;
      &lt;li&gt;Atomicity. 원자성. : 트랜잭션 연산은 commit 되던지 rollback되어야 한다.&lt;/li&gt;
      &lt;li&gt;Consistency. 일관성. : 트랜잭션이 완료되면 언제나 일관성 있는 DB의 상태로 변환된다.(수행 전후의 고정 요소 상태가 같다.)&lt;/li&gt;
      &lt;li&gt;Isolation. 독립성. : 둘 이상의 트랜잭션이 동시에 병렬 실행되는 경우 서로 끼어들지 않고, 서로 참조할 수 없다.&lt;/li&gt;
      &lt;li&gt;Durability. 지속성. : 성공적으로 완려된 트랜잭션으 결과는 시스템이 고장나도 영구적으로 반영된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CRUD : Create, Read, Update, Delete&lt;/li&gt;
  &lt;li&gt;CRUD 분석 : 데이터베이스 테이블에 변화를 주는 트랜잭션의 CRUD 연산에 대해서 CRUD 매트릭스를 작성하여 분석하는 것
    &lt;ul&gt;
      &lt;li&gt;트랜잭션의 주기별 발생 횟수를 파악하고 연관된 테이블들을 분석하면 테이블에 저장되는 데이터의 양을 유추할 수 있다.&lt;/li&gt;
      &lt;li&gt;생성 트랜잭셔 규모(Create)를 파악하여 구축해야 할 스토리지의 규모를 예측할 수 있다.&lt;/li&gt;
      &lt;li&gt;트랜잭션이 몰리는 테이블을 파악할 수 있으므로 디스크 구성 시 유용한 자료로 활용될 수 있다.&lt;/li&gt;
      &lt;li&gt;외부 프로세스 트랜잭션의 부하가 집중되는 DB 채널을 파악하고 분산시켜 연결 지연이나 타임아웃 오류를 방지할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CRUD 매트릭스 : 2차원 형태의 표로서 Row는 Process, Column은 table, 격자점에는 프로세스가 테이블에 발생시키는 변화를 표시한다.
    &lt;ul&gt;
      &lt;li&gt;Ex1. 주문 변경 = 데이터 Read + 수정 Upate. C&amp;gt;R&amp;gt;U&amp;gt;D 순서대로 우선순위가 높은 U만 적는다.&lt;/li&gt;
      &lt;li&gt;CRUD 매트릭스가 완성되었다면 어느 것도 적히지 않은 행이나 열, C나 R이 없는 열을 확인하여 불필요하거나 누락된 테이블,프로세스를 찾는다.&lt;/li&gt;
      &lt;li&gt;프로세스는 C 또는 R이 없을 수 있다. (주문 변경의 예시)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;트랜잭션 분석서 : 단위 프로세스와 CRUD 매트릭스를 이용하여 작성한다.
    &lt;ul&gt;
      &lt;li&gt;구성요소
        &lt;ol&gt;
          &lt;li&gt;프로세스&lt;/li&gt;
          &lt;li&gt;CRUD&lt;/li&gt;
          &lt;li&gt;테이블명&lt;/li&gt;
          &lt;li&gt;컬럼명&lt;/li&gt;
          &lt;li&gt;참조횟수 : 프로세스가 테이블을 참조하는 횟수&lt;/li&gt;
          &lt;li&gt;트랜잭션 수 : 주기별로 수행되는 트랜잭션 횟수1&lt;/li&gt;
          &lt;li&gt;발생 주기&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;88-인덱스-설계&quot;&gt;88 인덱스 설계&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;인덱스틑 데이터 레코드에 빠르게 접근하기 위해 &amp;lt;키 값, 포인터&amp;gt; 쌍으로 구성되는 데이터 구조이다.
    &lt;ul&gt;
      &lt;li&gt;ex) &amp;lt;학번, 주소&amp;gt; —&amp;gt; 학생 table의 record 주소&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;포인터는 테이블의 record에 대한 물리적 주소를 가리킨다.&lt;/li&gt;
  &lt;li&gt;레코드의 삽입과 삭제가 수시로 일어나는 경우에는 인덱스의 개수를 최소로하는 것이 효율적이다.&lt;/li&gt;
  &lt;li&gt;인덱스가 없으면 특정한 값을 찾기 위해 모든 데이터 페이지를 확인하는 TABLE SCAN이 발생한다.&lt;/li&gt;
  &lt;li&gt;기본 인덱스와 보조 인덱스가 있다.&lt;/li&gt;
  &lt;li&gt;기본 인덱스는 모든 키에 대해서 자동적으로 생성된다.&lt;/li&gt;
  &lt;li&gt;레코드의 물리적 순서가 엔트리 순서와 일치하게 유지되도록 구성되는 인덱스를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;클러스터드 인덱스&lt;/code&gt;라고 한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;클러스터드 인덱스 테이블&lt;/code&gt; : PK나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;인덱스 키&lt;/code&gt;의 순서에 따라서 데이터가 저장된다.&lt;/li&gt;
      &lt;li&gt;실제 데이터가 순서대로 저장되어 있어 인덱스를 검색하지 않아도 원하는 데이터를 빠르게 찾을 수 있다.&lt;/li&gt;
      &lt;li&gt;데이터삽입,삭제시 순서를 유지하기 위해 재정렬해야 한다.&lt;/li&gt;
      &lt;li&gt;한 개의 릴레이션에 하나의 인덱스만 생성할 수 있다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;넌클러스터드 인덱스&lt;/code&gt;
        &lt;ol&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;인덱스&lt;/code&gt;의 키 값만 정렬되어 있을 뿐 실제 데이터는 정렬되지 않는 방식&lt;/li&gt;
          &lt;li&gt;데이터를 검색하기 위해서는 먼저 인덱스를 검색하여 실제 데이터의 위치를 확인해야 해서 검색 속도가 떨어진다.&lt;/li&gt;
          &lt;li&gt;한 개의 릴레이션에 여러 개의 인덱스를 만들 수 있다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;트리기반 인덱스
    &lt;ul&gt;
      &lt;li&gt;사용 DBMS에서는 트리 구조 기반의 B+ 트리 인덱스를 주로 활용한다.&lt;/li&gt;
      &lt;li&gt;B 트리 인덱스
        &lt;ol&gt;
          &lt;li&gt;루트 노드에서 하위 노드로 키 앖의 크기를 비교해 나가면서 단말 노드에서 데이터를 찾는다.&lt;/li&gt;
          &lt;li&gt;키 값과 레코드를 가리키는 포인터들이 트리 노드에 오름차순으로 저장된다.&lt;/li&gt;
          &lt;li&gt;모든 리프노드는 같은 레벨에 있다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;B+ 트리 인덱스
        &lt;ol&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;단말 노드가 아닌 노드로 구성된 인덱스 세트&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;단말 노드로만 구성된 순자 세트&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;인덱스 세트에 있는 노드들은 단말 노드에 있는 키 값을 찾아갈 수 있는 경로로만 제공.&lt;/li&gt;
          &lt;li&gt;순차 세트에 있는 단말 노드가 해당 데이터의 레코드의 주소를 가리킨다.&lt;/li&gt;
          &lt;li&gt;인덱스 세트에 있는 모든 키 값이 단말 노드에 다시 나타나므로 단말 노드만을 이용한 순차 처리가 가능하다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비트맵 인덱스
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;인덱스 컬럼의 데이터&lt;/code&gt;를 0 또는 1로 변환하여 인덱스 키로 사용한다.&lt;/li&gt;
      &lt;li&gt;목적 : 키 값을 포함하는 row의 주소를 제공하는 것&lt;/li&gt;
      &lt;li&gt;분포도(조건에 맞는 레코드 수 / 전체 릴레이션 레코드 수)가 10~15%인 경우 효율적인 인덱스 검색을 할 수 있다.&lt;/li&gt;
      &lt;li&gt;데이터가 bit로 구성되어 효율적인 논리 연산이 가능하고 저장 공간이 작다&lt;/li&gt;
      &lt;li&gt;다중 조건을 만족하는 튜플의 개수 계산에 적합하다&lt;/li&gt;
      &lt;li&gt;동일한 값이 반복되는 경우가 많아 압축 효율이 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비트맵 조인 인덱스
    &lt;ul&gt;
      &lt;li&gt;다수의 조인된 객체로 구성된 인덱스.&lt;/li&gt;
      &lt;li&gt;단일 객체로 구성된 일반적인 인덱스와 액세스 방법이 다르다.&lt;/li&gt;
      &lt;li&gt;비트맵 인덱스와 물리적 구조가 동일하다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;함수기반 인덱스
    &lt;ul&gt;
      &lt;li&gt;컬럼의 값 대신 컬럼에 특정 함수나 수식을 적용하여 산출된 값을 사용하는 방식.&lt;/li&gt;
      &lt;li&gt;B+ 트리 인덱스 또는 비트맵 인덱스를 생성하여 사용한다.&lt;/li&gt;
      &lt;li&gt;데이터를 입력하거나 수정할 때 함수를 적용하므로 부하가 발생할 수 있다.&lt;/li&gt;
      &lt;li&gt;사용된 함수가 사용자 정의 함수일 경우 시스템 함수보다 부하가 더 크다&lt;/li&gt;
      &lt;li&gt;대소문자, 띄어쓰기 등에 상관없이 조회할 때 유용하게 사용된다.&lt;/li&gt;
      &lt;li&gt;적용 가능한 함수 종류
        &lt;ol&gt;
          &lt;li&gt;산술식Arithmetic Expression&lt;/li&gt;
          &lt;li&gt;사용자 정의 함수&lt;/li&gt;
          &lt;li&gt;SQL 함수&lt;/li&gt;
          &lt;li&gt;Package&lt;/li&gt;
          &lt;li&gt;C callout&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인덱스 설계
    &lt;ul&gt;
      &lt;li&gt;분명하게 드러난 컬럼에 대해 기본적인 인덱스를 먼저 지정한 후 개발 단계에서 필요한 인덱스의 설계를 추가한다
        &lt;ol&gt;
          &lt;li&gt;인덱스의 대상테이블이나 컬럼 등을 선정한다.&lt;/li&gt;
          &lt;li&gt;효율성을 검토하여 인덱스 최적화를 수행한다.&lt;/li&gt;
          &lt;li&gt;인덱스 정의서를 작성한다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인덱스 대상 테이블 선정 기준
    &lt;ul&gt;
      &lt;li&gt;MULTI BLOCK READ(한 번에 메모리에 읽어들일 수 있는 블록의 수)에 따라 판단
        &lt;ul&gt;
          &lt;li&gt;MBR가 16이면 테이블의 크기가 16블록 이상인 경우 인덱스 필요&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;랜덤 엑세스가 빈번한 테이블&lt;/li&gt;
      &lt;li&gt;특정 범위나 특정 순서로 데이터 조회가 필요한 테이블&lt;/li&gt;
      &lt;li&gt;다른 테이블과 순차적 조인이 발생되는 테이블&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인덱스 대상 컬럼 선정 기준
    &lt;ul&gt;
      &lt;li&gt;인텍스 컬럼의 분포도가 10~15%인 컬럼&lt;/li&gt;
      &lt;li&gt;10~15% 이상이어도 부분 처리를 목적으로 하는 컬럼&lt;/li&gt;
      &lt;li&gt;입출력 장표 등에서 조회 및 출력 조건으로 사용되는 컬럼&lt;/li&gt;
      &lt;li&gt;인덱스가 자동 생성되는 기본키와 Unique키 제약 조건을 사용한 컬럼&lt;/li&gt;
      &lt;li&gt;가능한 수정이 빈번하지 않은 컬럼&lt;/li&gt;
      &lt;li&gt;ORDER BY, GROUP BY, UNION이 빈번한 컬럼&lt;/li&gt;
      &lt;li&gt;분포도가 좁은 컬럼은 단독 인덱스로 구성&lt;/li&gt;
      &lt;li&gt;인덱스들이 자주 조합되어 사용되는 경우 하나의 결합 인덱스로 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;고려사항
    &lt;ol&gt;
      &lt;li&gt;새로 추가되는 인덱스는 기존 엑세스 경로에 영향을 미칠 수 있다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;넓은 범위를 인덱스로 처리하면 많은 오버헤드가 발생한다.&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;인덱스는 추가적인 저장 공간이 필요하다&lt;/li&gt;
      &lt;li&gt;인덱스와 테이블 데이터의 저장공간이 분리되도록 설계한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;89-뷰-설계&quot;&gt;89 뷰 설계&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;뷰 : 사용자에게 접근이 허용된 자료만을 제한적으로 보여주기 위해 하나 이상의 기본 테이블로부터 유도된, 이름을 가지는 가장 테이블이다.&lt;/li&gt;
  &lt;li&gt;저장장치 내에 물리적으로 존재하지 않지만, 사용자에게는 있는 것처럼 간주된다.&lt;/li&gt;
  &lt;li&gt;뷰는 데이터 보정 작업, 처리 과정 시험 등 임시적인 작업을 위한 용로도 활용된다.&lt;/li&gt;
  &lt;li&gt;조인문의 사용 최소화로 사용상의 편의성을 최대화한다.&lt;/li&gt;
  &lt;li&gt;뷰를 생성하면 뷰 정의가 시스템 내에 저장되었다가 생성된 뷰 이름을 질의어(SQL)에서 사용할 경우 질의어가 실행될 때 뷰에 정의된 기본 테이블로 대체되어 기본 테이블에 대해 실행된다.&lt;/li&gt;
  &lt;li&gt;기본 테이블로부터 유도된 테이블이기 때문에 기본 테이블과 같은 형태의 구조를 사용하며 조작도 거의 같다.&lt;/li&gt;
  &lt;li&gt;가상 테이블이라서 물리적으로 구현되지 않는다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;데이터의 논리적 독립성을 제공할 수 있다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;독자적인 인덱스를 가지지 않는다.&lt;/li&gt;
  &lt;li&gt;숨겨진 데이터를 위한 자동 보안이 제공된다.&lt;/li&gt;
  &lt;li&gt;DBA는 보안 측면에서 뷰를 활용할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;기본 테이블의 PK를 포함한 속성 집합으로 뷰를 구성해야만 삽입, 삭제, 갱신 연산이 가능하다&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;기본테이블 검색 연산과 비굑하여 제약이 따르지 않는다. 검색 연산은 제약이 없다.&lt;/li&gt;
  &lt;li&gt;뷰는 다른 뷰의 정의에 기초가 될 수 있다.&lt;/li&gt;
  &lt;li&gt;뷰가 정의된 기본 테이블이나 뷰를 삭제하면 그 테이블이나 뷰를 기초로 정의된 다른 뷰도 자동으로 삭제된다.&lt;/li&gt;
  &lt;li&gt;설계 순서
    &lt;ol&gt;
      &lt;li&gt;대상 테이블을 선정한다&lt;/li&gt;
      &lt;li&gt;대상 컬럼을 선정한다.&lt;/li&gt;
      &lt;li&gt;정의서를 작성한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;고려사항
    &lt;ol&gt;
      &lt;li&gt;테이블 구조가 단순화 될 수 있도록 반복적으로 조인을 설정하여 사용하거나 동일한 조건절을 사용하는 테이블을 뷰로 생성한다.
        &lt;ul&gt;
          &lt;li&gt;Ex. A 테이블과 B 테이블을 조인해서 사용하는 경우가 많으면 A,B에서 필요한 필드로 구성된 뷰를 생성한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;동일한 테이블이라도 업무에 따라 테이블을 이용하는 부분이 달라질 수 있으므로 사용할 데이터를 다양한 관점에서 제시해야 한다.
        &lt;ul&gt;
          &lt;li&gt;Ex. A 테이블의 속성 중 B 업무에 필요한 속성들만 뷰로 정의해서 사용한다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;90-클러스터-설계&quot;&gt;90 클러스터 설계&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;클러스터는 데이터 저장시 데이터 엑세스 효율을 향상시키기 위해 동일한 성격의 데이터를 동일한 데이터 블록에 저장하는 물리적 저장 방법이다.&lt;/li&gt;
  &lt;li&gt;클러스터링키로 지정된 컬럼 값의 순서대로 저장되고, 여러 개의 테이블이 하나의 클러스터에 저장된다.&lt;/li&gt;
  &lt;li&gt;클러스터링 된 테이블은 데이터 조회 속도는 향상시키지미나, 데이터 입력,수정,삭제에 대한 성능은 저하시킨다.&lt;/li&gt;
  &lt;li&gt;데이터 분포도가 넓을 수록 유리하다
    &lt;ul&gt;
      &lt;li&gt;인덱스틑 분포도가 좁을수록, 클러스터링은 분포도가 넓을 수록 유리하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 분포도가 넓은 테이블을 클러스터링하면 저장 공간을 절약할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;클러스터링된 테이블은 클러스터링키 열을 공유하므로 저장 공간이 줄어든다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대용량을 처리하는 트랜잭션은 전체 테이블을 스캔하는 일이 자주 발생하므로 클러스터링을 하지 않는 것이 좋다.&lt;/li&gt;
  &lt;li&gt;단일 테이블 클러스터링 : 처리 범위가 넓은 경우
    &lt;ul&gt;
      &lt;li&gt;단일 테이블 내부에서 클러스터링&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다중 테이블 클러스터링 : 조인이 많이 발생하는 경우
    &lt;ul&gt;
      &lt;li&gt;클러스터링이 동일한 성격의 데이터를 동일한 데이터 블록에 저장하는 방식임을 기억&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클러스터 대상 테이블
    &lt;ol&gt;
      &lt;li&gt;분포도가 넓은 테이블&lt;/li&gt;
      &lt;li&gt;대량의 범위를 자주 조회하는 테이블&lt;/li&gt;
      &lt;li&gt;입력,수정,삭제가 자주 발생하지 않는 테이블&lt;/li&gt;
      &lt;li&gt;자주 조인되어 사용되는 테이블&lt;/li&gt;
      &lt;li&gt;ORDER BY, GROUP BY, UNION이 빈번한 테이블&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;91-파티션-설계&quot;&gt;91 파티션 설계&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;대용량의 테이블이나 인덱스를 작은 논리적 단위인 파티션으로 나누는 것&lt;/li&gt;
  &lt;li&gt;대용량 DB는 중요한 몇 개의 테이블에만 집중되기 때문에 테이블을 작은 단위로 나눠 분산시켜 성능 저하를 방지하고 관리가 용이해짐&lt;/li&gt;
  &lt;li&gt;파티션키 또는 인덱스키에 따라 물리적으로 별도의 공간에 데이터가 저장된다.&lt;/li&gt;
  &lt;li&gt;데이터 처리는 테이블 단위로 나눠지고, 데이터 저장은 파티션별로 수행된다.&lt;/li&gt;
  &lt;li&gt;파티션 종류 : 범위(열 기준)/해시(해시값 기준)/조합(범위+해시)파티션&lt;/li&gt;
  &lt;li&gt;데이터 관리의 용이성을 위해 이력성 데이터(삭제되었지만 보존되는 기간 내의 데이터)는 파티션 생성주기와 소멸주기를 일치시켜야 한다.&lt;/li&gt;
  &lt;li&gt;매일 생성되는 날짜 컬럼, 백업의 기준이 되는 날짜 컬럼, 파티션 간 이동이 없는 컬럼, IO 병목을 줄일 수 있는 데이터 분포가 양호한 컬럼 등을 파티션키로 선정&lt;/li&gt;
  &lt;li&gt;인덱스 파티션
    &lt;ul&gt;
      &lt;li&gt;파티션된 테이블의 데이터를 관리하기 위해 인텍스를 나눈 것&lt;/li&gt;
      &lt;li&gt;Local Partitioned Index : 테이블 파티션과 인덱스 파티션이 1 대 1 대응
        &lt;ul&gt;
          &lt;li&gt;Ex: 파티션과 인덱스 모두 판매일자 필드를 기준으로 수행한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Global Partitioned Index : 테이블 파티션과 인덱스 파티션이 독립적으로 구성
        &lt;ul&gt;
          &lt;li&gt;Ex: 파티션은 판매일자 필드를 기준으로 수행하고, 인덱스는 지점 필드를 기준으로 수행한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Local이 Global에 비해 데이터 관리가 쉽다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;92-데이터베이스-용량-설계&quot;&gt;92 데이터베이스 용량 설계&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 접근성을 향상시키는 설계 방법
    &lt;ol&gt;
      &lt;li&gt;테이블의 테이블스페이스와 인덱스의 인덱스스페이스를 분리하여 구성&lt;/li&gt;
      &lt;li&gt;테이블스페이스와 임시 테이블스페이스를 분리하여 구성&lt;/li&gt;
      &lt;li&gt;테이블을 마스터 테이블과 트랜잭션 테이블로 분류&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;DB에 생성되는 오브젝트의 익스텐트(기본 용량이 모두 찼을 때 추가적으로 할당되는 공간) 발생을 최소화하여 성능 향상시킨다.&lt;/li&gt;
  &lt;li&gt;테이블과 인덱스의 테이블스페이스 용량을 산정한다. 테이블스페이스 용량은 테이블스페이스에 생성되는 테이블 용량을 모두 더한 값이 40%를 추가해서 산정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;93-분산-데이터베이스-설계&quot;&gt;93 분산 데이터베이스 설계&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;논리적으로는 하나의 시스템, 물리적으로는 네트워크를 통해 여러 개의 사이트에 분산되어 있는 DB&lt;/li&gt;
  &lt;li&gt;구성요소
    &lt;ol&gt;
      &lt;li&gt;분산 처리기 : 자체적으로 처리 능력을 가진다. 지리적으로 분산되어 있는 컴퓨터 시스템을 말한다.&lt;/li&gt;
      &lt;li&gt;분산 데이터베이스 : 지리적으로 분산되어 있는 DB. 지역의 특성에 맞게 DB가 구성됨&lt;/li&gt;
      &lt;li&gt;통신 네트워크 : 분산처리기들을 통신망으로 연결하여 논리적으로 하나의 시스템처럼 작동할 수 있도록 하는 통신 네트워크&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;투명성
    &lt;ul&gt;
      &lt;li&gt;위치 투명성 : 액세스하려는 DB의 실제 위치를 알필요 없이 논리적인 명칭만으로 액세스&lt;/li&gt;
      &lt;li&gt;중복 투명성 : 동일한 데이터가 여러 곳에 저장되어 있어도 하나라고 느낌&lt;/li&gt;
      &lt;li&gt;병행 투명성 : 다수의 트랜잭션이 동시에 실현되어도 다른 트랜잭션의 영향을 받지 않음&lt;/li&gt;
      &lt;li&gt;장애 투명성 : 여러 장애에도 불구하고 트랜잭션을 정확하게 처리한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;전역 관계망을 논리적 측면에서 소규모 단위(Fragment)로 분할하고, 분할된 결과를 복수의 노드에 할당하는 과정으로 진행된다.&lt;/li&gt;
  &lt;li&gt;분할Fragment
    &lt;ul&gt;
      &lt;li&gt;규칙
        &lt;ol&gt;
          &lt;li&gt;완전성 : 전체 데이터를 대상으로 분할해야 한다.&lt;/li&gt;
          &lt;li&gt;재구성 : 분할된 데이터는 관계 연산을 활용하여 본래의 데이터로 재구성할 수 있어야 한다.&lt;/li&gt;
          &lt;li&gt;상호 중첩 배제 : 분할된 데이터를 서로 다른 분할의 항목에 속하지 않아야 한다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;방법 : 수평 분할(Row 기준), 수직 분할(Col 기준)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;할당Allocation
    &lt;ul&gt;
      &lt;li&gt;동일한 분할을 여러 개의 서버에 생성하는 분산 방법&lt;/li&gt;
      &lt;li&gt;비중복 할당 : 최적의 노드를 선택해서 분산 DB의 단일 노드에서만 분할이 존재
        &lt;ul&gt;
          &lt;li&gt;배타적 분할로 분리하기 힘든 요구가 자주 포함되므로 분할된 테이블 간의 의조넝을 무시되고 비용 증가 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;중복 할당 : 동일한 테이블을 다른 서버에 복제하는 방법으로, 일부 복제하는 부분 복제와 전체를 복제하는 완전 복제가 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;94-데이터베이스-이중화--서버-클러스터링&quot;&gt;94 데이터베이스 이중화 / 서버 클러스터링&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DB 이중화 : 서버 오류로 인한 데이터베이스 서비스 중단이나 물리적 손상 발생 시 이를 복구하기 위해 동일한 DB를 복제하여 관리하는 것
    &lt;ul&gt;
      &lt;li&gt;앱을 여러 개의 DB로 분산시켜 처리하므로 DB의 부하를 줄일 수 있다.&lt;/li&gt;
      &lt;li&gt;쉽게 백업 서버를 운영할 수 있다.&lt;/li&gt;
      &lt;li&gt;기법
        &lt;ul&gt;
          &lt;li&gt;Eager : 트랜잭셔 수행 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;중&lt;/code&gt; 데이터 변경이 발생하면 이중화된 모든 DB에 즉시 전달하여 변경 내용이 즉시 적용되도록 하는 기법&lt;/li&gt;
          &lt;li&gt;Lazy : 트랜잭션의 수행이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;종료되면&lt;/code&gt; 변경 사실을 새로운 트랜잭션에 작성하여 각 DB에 전달되는 기법. DB마다 새로운 트랜잭션이 수행되는 것으로 간주된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;구성 방법
        &lt;ul&gt;
          &lt;li&gt;활동-대기Active-Standy 기법 : 둘 중 하나만 활성 상태로 서비스. 고장나면 하나를 활동 상태로 전환&lt;/li&gt;
          &lt;li&gt;활동-활동Active-Active 기법 : 두 개의 DB가 서로 다른 서비스를 제공하다가 둘 중 한 쪽 DB에 문제가 발생하면 나머지 다른 DB가 서비스를 제공&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클러스터링 : 두 대 이상의 서버를 하나의 서버처럼 운영하는 기술
    &lt;ul&gt;
      &lt;li&gt;서버 이중화 및 공유 스토리지를 사용하여 서버의 고가용성을 제공한다.&lt;/li&gt;
      &lt;li&gt;고가용성 클러스터링 : 하나의 서버에 장애가 발생하면 다른 노드 서버가 받아 처리하여 서비스 중단을 막음&lt;/li&gt;
      &lt;li&gt;병렬 처리 클러스터링 : 전체 처리율을 높이기 위해 하나의 작업을 여러 개의 서버에서 분산하여 처리하는 방식
        &lt;ul&gt;
          &lt;li&gt;Lode Balancer 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;95-데이터베이스-보안-암호화&quot;&gt;95 데이터베이스 보안/ 암호화&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;개인키 암호 방식 = 비밀키 암호 방식
    &lt;ul&gt;
      &lt;li&gt;동일한 키로 암호화하고 복호화&lt;/li&gt;
      &lt;li&gt;= 대칭 암호 방식 = 단일키 암호 방식&lt;/li&gt;
      &lt;li&gt;전위/대체/대수/합성 기법(DES)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공개키 암호 방식
    &lt;ul&gt;
      &lt;li&gt;서로 다른 키로 암호화하고 복호화&lt;/li&gt;
      &lt;li&gt;암호화 키 : 공개키. DB 사용자에게 공개&lt;/li&gt;
      &lt;li&gt;복호화 키 : 비밀키. 관리자가 관리&lt;/li&gt;
      &lt;li&gt;= 비대칭 암호방식&lt;/li&gt;
      &lt;li&gt;RSA&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;96-데이터베이스-보안---접근통제&quot;&gt;96 데이터베이스 보안 - 접근통제&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데이터가 저장된 객체와 이를 사용하는 주체 사이의 정보 흐름을 제한&lt;/li&gt;
  &lt;li&gt;임의 접근통제 : 접근하는 사용자의 신원에 따라 접근 권한을 부여
    &lt;ul&gt;
      &lt;li&gt;통제 권한이 주체에 있어 주체가 접근통제 권한을 지정/제어 가능&lt;/li&gt;
      &lt;li&gt;SQL의 GRANT와 REVOKE&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;강제 접근통제 : 주체와 객체의 등급을 비교하여 접근 권한을 부여
    &lt;ul&gt;
      &lt;li&gt;제3자가 접근통제 권한을 지정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;접근통제의 3요소 : 정책. 매커니즘. 보안 모델&lt;/li&gt;
  &lt;li&gt;접근통제 정책
    &lt;ul&gt;
      &lt;li&gt;신분 기반 정책 : 주체나 그룹의 신분에 근거하여 객체의 접근을 제한
        &lt;ul&gt;
          &lt;li&gt;IBP. Individual-Based Policy : 최소 권한 정책. 단일 주체에게 하나의 객체에 대한 허가 부여&lt;/li&gt;
          &lt;li&gt;GBP. Group-Based Policy : 복수 주체에 하나의 객체에 대한 허가를 부여&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;규칙 기반 정책 : 주체가 갖는 권한에 근거하여 객체의 접근을 제한
        &lt;ul&gt;
          &lt;li&gt;MLP. Multi-Level Policy : 사용자 및 객체별로 지정된 기밀 분류에 따른 정책&lt;/li&gt;
          &lt;li&gt;CBP. Compartment-Based Policy : 집단별로 지정된 기밀 허가에 따른 정책&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;역할 기반 정책 : GBP의 변형. 역할게 근거하여 객체의 접근을 제한
        &lt;ul&gt;
          &lt;li&gt;인사담당자. DBA&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;접근통제 매커니즘 : 정의된 접근통제 정책을 구현하는 기술적인 방법
    &lt;ol&gt;
      &lt;li&gt;접근통제 목록 : 어떤 행위를 할 수 있는지 객체를 기준으로 목록화&lt;/li&gt;
      &lt;li&gt;능력 리스트 : 주체가 허가된 자원 및 권한을 기록&lt;/li&gt;
      &lt;li&gt;보안 등급 : 주체나 객체 등에 부여된 보안 속성의 집합.&lt;/li&gt;
      &lt;li&gt;패스워드 : 주체가 자신임을 증명하는 인증방법&lt;/li&gt;
      &lt;li&gt;암호화&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;접근통제 보안 모델
    &lt;ol&gt;
      &lt;li&gt;기밀성Confidentiality 모델 : 정보와 자원은 인가된 사용자에게만 접근이 허용. 노출되어도 데이터를 읽을 수 없음
        &lt;ul&gt;
          &lt;li&gt;군대 시스템 등 특수 환경에서 주로 사용&lt;/li&gt;
          &lt;li&gt;단순 보안 규칙 : 주체는 자신보다 높은 등급의 객체를 읽을 수 없다.&lt;/li&gt;
          &lt;li&gt;스타-보안 규칙 : 주체는 자신보다 낮은 등급의 객체에 정보를 쓸 수 없다.&lt;/li&gt;
          &lt;li&gt;강한 스타-보안 규칙 : 주체는 자신과 등급이 다른 객체를 읽거나 쓸 수 없다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;무결성 모델 : 정보는 인가된 사용자만 수정할 수 있다. 정보의 내용이 전송 중에 수정되지 않고 전달되는 것을 보장한다.
        &lt;ul&gt;
          &lt;li&gt;데이터의 일관성 유지에 중점을 두어 개발&lt;/li&gt;
          &lt;li&gt;단순 무결성 규칙 : 주체는 자신보다 낮은 등급의 객체를 읽을 수 없다.&lt;/li&gt;
          &lt;li&gt;스타 무결성 규칙 : 주체는 자신보다 높은 등급의 객체에 정보를 쓸 수 없다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;접근통제 모델
        &lt;ul&gt;
          &lt;li&gt;접근통제 매커니즘을 보안 모델로 발전시킨 것&lt;/li&gt;
          &lt;li&gt;접근통제 행렬Access Control Matrix&lt;/li&gt;
        &lt;/ul&gt;
        &lt;ul&gt;
          &lt;li&gt;행은 주제. 열은 객체. 격자는 권한(ALL, R, W, R/W).을 표로 만들어서 관리&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;접근통제 조건
    &lt;ul&gt;
      &lt;li&gt;값 종속 통제: 객체에 저장도니 값에 따라, 납입한 금액에 따라 보안 등급이 설정되는 등&lt;/li&gt;
      &lt;li&gt;다중 사용자 통제 : 지정된 객체에 다수의 사용자가 동시에 접근하는 경우 다수결에 따라 접근 통제하는 등&lt;/li&gt;
      &lt;li&gt;컨텍스트 기반 통제 : 특정 시간, 네트워크 주소 등에 근거해서 접근 제어. 근무시간에만 접근하도록 통제하는 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;감사 추적
    &lt;ul&gt;
      &lt;li&gt;사용자나 앱이 DB에 접근하여 수행한 모든 활동을 기록하는 기능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;97-데이터베이스-백업--c&quot;&gt;97 데이터베이스 백업 : C&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;장애유형
    &lt;ol&gt;
      &lt;li&gt;사용자 실수&lt;/li&gt;
      &lt;li&gt;미디어 장애 : CPU, 메모리, 디스크 등 하드웨어 장비나 데이터가 파손된 경우&lt;/li&gt;
      &lt;li&gt;구문 장애 : 프로그램 오류, 사용 공간 부족&lt;/li&gt;
      &lt;li&gt;사용자 프로세스 장애 : 프로그램 비정상 종료. 네트워크 비연결 세션 종료&lt;/li&gt;
      &lt;li&gt;인스턴스 장애 : 여러 이유로 메모리나 DB 서버의 프로세스 중단&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;로그 파일
    &lt;ul&gt;
      &lt;li&gt;DB 복구를 위해 가장 기본적ㅇ니 자료&lt;/li&gt;
      &lt;li&gt;DB의 상태 변화에 대한 내용을 작업 순서가 아닌 시간의 흐름에 따라서 기록.&lt;/li&gt;
      &lt;li&gt;UNDO, REDO를 위해 사용됨&lt;/li&gt;
      &lt;li&gt;트랜잭션 시작, Rollback, 데이터 입력, 수정, 삭제 시점에 기록됨&lt;/li&gt;
      &lt;li&gt;로그 파일 내용
        &lt;ol&gt;
          &lt;li&gt;트랜잭션 잡업 내용&lt;/li&gt;
          &lt;li&gt;트랜잭션 식별&lt;/li&gt;
          &lt;li&gt;틀내잭션 레코드&lt;/li&gt;
          &lt;li&gt;데이터 식별자&lt;/li&gt;
          &lt;li&gt;갱신 이전 값&lt;/li&gt;
          &lt;li&gt;갱신 이후 값&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스 복구 알고리즘(데이터베이스 백업을 위함. 아래의 저장매체는 백업 저장매체)
    &lt;ul&gt;
      &lt;li&gt;동기적 갱신 : 트랜잭션이 완료되기 전에 DB 버퍼 내용을 동시에 저장매체에 기록&lt;/li&gt;
      &lt;li&gt;비동기적 갠신 : 트랜잭션이 완료된 내용을 일정 주기나 작업량에 따라 시간 차이를 두고 저장매채에 기록
        &lt;ol&gt;
          &lt;li&gt;NO-UNDO/REDO    : 데이터베이스 버퍼의 내용을 비동기적으로 갱신한 경우의 복구 알고리즘&lt;/li&gt;
        &lt;/ol&gt;
        &lt;ul&gt;
          &lt;li&gt;NO-UNDO  : 트랜잭션 완료 전에는 변경 내용이 DB에 기록되지 않아서 최소할 필요 없음&lt;/li&gt;
          &lt;li&gt;REDO     : 트랜잭션 완료 후 DB 버퍼에는 기록되고 저장매체이는 기록되지 않아서 트랜잭션 내용을 다시 실행
    1. UNDO/NO-REDO    : 데이터베이스 버퍼의 내용을 동기적으로 갱신한 경우의 복구 알고리즘&lt;/li&gt;
          &lt;li&gt;UNDO     : 트랜잭션 완료 전에 시스템이 파손되었다면 변경 내용을 취소&lt;/li&gt;
          &lt;li&gt;NO-REDO  : 트랜잭션 완료 전에 데이터베이스 버퍼 내용을 이미 저장 매체에 기록했으므로 트랜잭션 내용을 다시 실행하지 않음
    1. UNDO/REDO       : 데이터베이스 버퍼의 내용을 동기/비동기적으로 갱신한 경우의 복구 알고리즘&lt;/li&gt;
          &lt;li&gt;UNDO/REDO: DB 기록 전에 트랜잭션이 완료될 수 있으므로 완료된 트랜잭션이 DB에 기록되지 못했다면 다시 실행    &lt;br /&gt;
    1. NO-UNDO/NO-REDO : 데이터베이스 버퍼의 내용을 동기적으로 저장 매체에 기록하지만 DB와는 다른 영역에 기록한 경우의 복구 알고리즘&lt;/li&gt;
          &lt;li&gt;NO-UNDO  : 변경 내용은 데이터베이스와 다른 영역에 기록되어 있으므로 최소할 필요가 없다.&lt;/li&gt;
          &lt;li&gt;NO-REDO  : 다른 영역에 이미 기록되어 있으므로 트랜잭션을 다시 실행할 필요가 없다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;백업 종류
    &lt;ul&gt;
      &lt;li&gt;물리 백업 : DB 파일을 백업. 속도가 빠름. 작업 단순. 문제 발생시 원인 파악 및 해결 어렵.&lt;/li&gt;
      &lt;li&gt;논리 백업 : DB 내의 논리적 객체들을 백업. 복원시 데이터 손상을 막고 문제 발생 시 원인 파악 및 해결이 수월. 시간 오래 걸림.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;98-스토리지&quot;&gt;98 스토리지&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DAS. Direct Attached Storage
    &lt;ul&gt;
      &lt;li&gt;서버와 저장장치를 전용 케이블로 직업 연결.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NAS. Network Attached Storage
    &lt;ul&gt;
      &lt;li&gt;서버와 저장장치가 네트워크를 통해 연결.&lt;/li&gt;
      &lt;li&gt;별도의 파일 관리 기능이 있는 NAS Storage가 내장된 저장장치를 직접 관리&lt;/li&gt;
      &lt;li&gt;이터넷 스위치를 통해 다른 서버에서도 스토리지에 접근 가능.&lt;/li&gt;
      &lt;li&gt;확장성. 유연성 우수&lt;/li&gt;
      &lt;li&gt;접속 증가 시 성능이 저하&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SAN. Storage Area Network
    &lt;ul&gt;
      &lt;li&gt;DAS의 속도 + NAS의 파일 공유 특성&lt;/li&gt;
      &lt;li&gt;서버와 저장장치를 연결하는 전용 네트워크를 별도로 구성&lt;/li&gt;
      &lt;li&gt;파이버 채널 스위치를 이용하여 네트워크 구성&lt;/li&gt;
      &lt;li&gt;파이버 채널 스위치는 서버나 저장장치를 광케이블로 연결해서 처리속도가 빠름.&lt;/li&gt;
      &lt;li&gt;초기 비용 높음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;99-논리-데이터의-모델의-물리-데이터-모델-변환&quot;&gt;99 논리 데이터의 모델의 물리 데이터 모델 변환&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;엔티티를 테이블로 변환
    &lt;ul&gt;
      &lt;li&gt;엔티티 -&amp;gt; 테이블&lt;/li&gt;
      &lt;li&gt;속성 -&amp;gt; 컬럼&lt;/li&gt;
      &lt;li&gt;주 식별자 -&amp;gt; PK&lt;/li&gt;
      &lt;li&gt;외부 식별자 -&amp;gt; FK&lt;/li&gt;
      &lt;li&gt;관계 -&amp;gt; 관계&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;슈퍼타입/서브타입을 테이블로 변환
    &lt;ul&gt;
      &lt;li&gt;슈퍼타입 기준 테이블 변환
        &lt;ul&gt;
          &lt;li&gt;장점 : 데이터 엑세스가 용이. SQL 문장이 단순해짐&lt;/li&gt;
          &lt;li&gt;단점 : 인덱스 크기의 증가로 인덱스 효율 감소. 디스크 저장 공간 증가.&lt;/li&gt;
          &lt;li&gt;서브타입에 속성이나 관곅 적을 경우 적용&lt;/li&gt;
          &lt;li&gt;하나로 통합된 테이블에 서브 타입의 모든 속성이 포함&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;서브타입 기준 테이블 변환
        &lt;ul&gt;
          &lt;li&gt;장점 : 여러 개의 테이블로 통합하므로 테이블당 크기가 감소하여 전체 테이블 스캔시 유리하다.&lt;/li&gt;
          &lt;li&gt;단점 : 수행속도 감소. UID의 유지 관리가 어려움.&lt;/li&gt;
          &lt;li&gt;서브타입에 속성이나 관계가 많이 포함된 경우 적용&lt;/li&gt;
          &lt;li&gt;서브 타입에 슈퍼타입의 속성을 각각 추가&lt;/li&gt;
          &lt;li&gt;서브타입을 기준으로 여러 개의 테이블로 변환&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;개별타입 기준 테이블 변환
        &lt;ul&gt;
          &lt;li&gt;장점 : 저장공간 작다.&lt;/li&gt;
          &lt;li&gt;단점 : 조인이 항상 발생.&lt;/li&gt;
          &lt;li&gt;슈퍼타입과 서브타입 테이블들을 각각의 개별 테이블로 변환&lt;/li&gt;
          &lt;li&gt;슈퍼와 서브 사이에 각각 1대1 관계 형성&lt;/li&gt;
          &lt;li&gt;전체 데이터에 대한 처리가 빈번한 경우&lt;/li&gt;
          &lt;li&gt;서브타입의 처리가 대부분 독립적으로 발생하는 경우&lt;/li&gt;
          &lt;li&gt;통합하는 테이블의 컬럼 수가 많은 경우&lt;/li&gt;
          &lt;li&gt;서브타입의 컬럼 수가 많은 경우&lt;/li&gt;
          &lt;li&gt;슈퍼타입의 처리 범위가 넓고 빈번하게 발생하여 단일 테이블 클러스터링이 필요한 경우&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;100-물리-데이터-모델-품질-검토&quot;&gt;100 물리 데이터 모델 품질 검토&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;정확성&lt;/code&gt; : 데이터 모델이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;요구사항&lt;/code&gt;에 따라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;정확하게&lt;/code&gt; 표현됨&lt;/li&gt;
  &lt;li&gt;완전성 : 데이터 모델과 요구사항이 누락 없이 반영됨&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;준거성&lt;/code&gt; : 데이터 모델이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;표준, 규칙, 요건&lt;/code&gt; 등을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;정확하게&lt;/code&gt; 준수함&lt;/li&gt;
  &lt;li&gt;최신성 : 데이터 모델이 최근 이슈나 현행 시스템을 반영함&lt;/li&gt;
  &lt;li&gt;일관성 : 데이터 모델이 표현상의 일관성을 유지&lt;/li&gt;
  &lt;li&gt;활용성 : 사용자가 충분히 이해가능. 업무 변화에 따른 데이터 구조 변경이 최소화 가능.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Niklas Jang</name></author><category term="EIP" /><summary type="html">2장 물리 데이터베이스 설계</summary></entry><entry><title type="html">[자격증][정처기] 3과목 데이터베이스 구축 - 1</title><link href="http://localhost:4000/eip/EIP-Subject-3-1/" rel="alternate" type="text/html" title="[자격증][정처기] 3과목 데이터베이스 구축 - 1" /><published>2020-08-07T00:00:00+09:00</published><updated>2020-08-07T00:00:00+09:00</updated><id>http://localhost:4000/eip/EIP-Subject-3-1</id><content type="html" xml:base="http://localhost:4000/eip/EIP-Subject-3-1/">&lt;h1 id=&quot;1장-논리-데이터베이스-설계&quot;&gt;1장 논리 데이터베이스 설계&lt;/h1&gt;

&lt;h2 id=&quot;70-데이터-베이스-설계&quot;&gt;70 데이터 베이스 설계&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스 설계 순서
    &lt;ol&gt;
      &lt;li&gt;요구 조건 분석 : 요구 조건 명세서 작성&lt;/li&gt;
      &lt;li&gt;개념적 설계 : 개념 스키마, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;트랜잭션 모델링&lt;/code&gt;, ER 모델&lt;/li&gt;
      &lt;li&gt;논리적 설계 : 논리 스키마 설계,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;트랜잭션 인터페이스&lt;/code&gt; 설계
        &lt;ul&gt;
          &lt;li&gt;관계형 DB라면 테이블을 설계하는 단계&lt;/li&gt;
          &lt;li&gt;결과적으로 데이터베이스 스키마가 도출된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;물리적 설계 : 물리적 구조의 데이터로 변환
        &lt;ul&gt;
          &lt;li&gt;저장구조 및 액세스 경로를 결정하는 단계&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;구현 : DDL로 데이터베이스 생성, 트랜잭션 생성&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;71-데이터-모델의-개념&quot;&gt;71 데이터 모델의 개념&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 모델 : 현실 세계의 정보들을 컴퓨터에 표현하기 위해서 단순화, 추상화하여 체계적으로 표혆나 개념적 모형&lt;/li&gt;
  &lt;li&gt;정보 모델링 : 현실 세계에 존재하는 개체를 인간이 이해할 수 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;정보 구조&lt;/code&gt;로 표현하는 과정&lt;/li&gt;
  &lt;li&gt;구성요소 : 개체, 속성, 관계&lt;/li&gt;
  &lt;li&gt;표시할 요소 : 구조, 연산, 제약 조건 (S.O.C)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;72-데이터-모델의-구성-요소---개체&quot;&gt;72 데이터 모델의 구성 요소 - 개체&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;실세계에 독립적으로 존재하는 유형, 무형의 정보로서 서로 연관된 몇 개의 속성으로 구성된다.&lt;/li&gt;
  &lt;li&gt;파일의 레코드에 대응하는 것으로 어떤 정보를 제공하는 역할을 수행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;73-데이터-모델의-구성-요소---속성&quot;&gt;73 데이터 모델의 구성 요소 - 속성&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;기본속성 : 업무 분석을 통해 정의한 속성&lt;/li&gt;
  &lt;li&gt;설계속성 : 업무상에 존재하지 않고 설계 과정에서 도출해내는 속성&lt;/li&gt;
  &lt;li&gt;파상속성 : 다른 속성으로부터 계산이나 변형 등의 영향을 받아 발생하는 속성.되도록 적은 수를 유지&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;74-데이터-모델의-구성요소---관계&quot;&gt;74 데이터 모델의 구성요소 - 관계&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;종속 관계 : 두 개체 사이의 주종관계. 식별 관계와 비식별 관계가 있다.
    &lt;ol&gt;
      &lt;li&gt;식별 관계(Identifying -) : 객체 A의 PK가 B의 FK이면서 PK이다.&lt;/li&gt;
      &lt;li&gt;비식별 관계 : 객체 A의 PK가 B의 FK이면서 NON-PK이다. B 개체의 존재 여부가 A 객체의 존재 여부에 의존적이지 않다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;중복 관계 : 두 개체 사이에 2번 이상의 종속 관계가 발생&lt;/li&gt;
  &lt;li&gt;재귀 관계 : 개체가 자기 자신과 관계&lt;/li&gt;
  &lt;li&gt;배타 관계 : 배타 AND 관계와 배타 OR 관계가 있다.
    &lt;ol&gt;
      &lt;li&gt;배타 AND 관계 : 하위 개체들 중 속성이나 구분자 조건에 따라 한개의 개체만 선택 가능&lt;/li&gt;
      &lt;li&gt;배타 OR 관계 : 하나 이상의 개체를 선택할 수 있음&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;75-식별자논리-데이터-모델링-단계-key는-물리-데이터-모델린-단계에서-사용&quot;&gt;75 식별자(논리 데이터 모델링 단계. Key는 물리 데이터 모델린 단계에서 사용.)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;특징 : 유일성(각 인스턴스를 구분할 수 있음). 최소성. 불변성(지정되면 변하지 않음). 존재정(not-null)&lt;/li&gt;
  &lt;li&gt;대표성 여부 : 주 식별자, 보조 식별자. PK와 Non-PK.&lt;/li&gt;
  &lt;li&gt;스스로 생성 여부 : 내부 식별자, 외부 식별자 Non-FK와 FK.&lt;/li&gt;
  &lt;li&gt;단일 속성 여부 : 단일 식별자, 복합 식별자(다중 식별자 아님!) PK가 1개 속성으로 구성, PK가 다수로 구성&lt;/li&gt;
  &lt;li&gt;대체 여부 : 원조 식별자, 대리 식별자. 복합 식별자를 대신하는 하나의 식별자를 만들어서 단일 식별자로 사용하는 경우.&lt;/li&gt;
  &lt;li&gt;후보 식별자 : PK는 아니지만 유일성을 만족하는 경우. 후보키의 논리 데이터 모델링 버전.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;76-e-r-모델&quot;&gt;76 E-R 모델&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;피터 첸 표기법 1 : N
    &lt;ul&gt;
      &lt;li&gt;객체A - 1 - 관계 - N - 객체B&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정보 공학 표기법(IE) 크로우풋&lt;/li&gt;
  &lt;li&gt;바커 표기법 #기본키 * 낫널 o널가능&lt;/li&gt;
  &lt;li&gt;321페이지 7번 문제 보기&lt;/li&gt;
  &lt;li&gt;ER모델에서 관계는 속성들에 대한 관계 표현이 아닌, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;개체&lt;/code&gt;들에 대한 관계 표현이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;77-관계형-데이터-모델&quot;&gt;77 관계형 데이터 모델&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;324페이지 3번 문제 보기&lt;/li&gt;
  &lt;li&gt;관계 모델의 릴레이션으로 표현할 때, 1 : N의 경우에 N쪽에 1의 pk를 fk로 추가한다.
    &lt;ul&gt;
      &lt;li&gt;학과 - (1,1) - 소속하다 - (1,N) - 대학&lt;/li&gt;
      &lt;li&gt;학과(~학과코드~, 학과이름, 단과대학명(FK))&lt;/li&gt;
      &lt;li&gt;대학(~단과대학명~, 학장이름)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;78-관계형-데이터베이스의-구조&quot;&gt;78 관계형 데이터베이스의 구조&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;튜플의 수 = Cardinality = 기수 = 대응수&lt;/li&gt;
  &lt;li&gt;속성의 수 = Degree = 차수&lt;/li&gt;
  &lt;li&gt;특징
    &lt;ol&gt;
      &lt;li&gt;한 릴레이션에서 똑같은 튜플이 포함될 수 없으므로 각 튜플은 모두 상이하다.&lt;/li&gt;
      &lt;li&gt;한 릴레이션에 포함된 튜플 사이에는 순서가 없다.&lt;/li&gt;
      &lt;li&gt;속성의 유일한 식별을 위해 속성의 명칭은 유일해야 한다.&lt;/li&gt;
      &lt;li&gt;속성을 구하는 값은 동일한 값이 있을 수 있다.&lt;/li&gt;
      &lt;li&gt;속성의 값은 논리적으로 더 이상 쪼갤 수 없는 원자값만을 저장한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;79-관계형-데이터베이스의-제약-조건---카key&quot;&gt;79 관계형 데이터베이스의 제약 조건 - 카(Key)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;후보키 : 유일성과 최소성 만족&lt;/li&gt;
  &lt;li&gt;기본키 : 후보키 중에서 선정된 주키&lt;/li&gt;
  &lt;li&gt;대체키 : 후보키 중에서 선정되지 않은 키&lt;/li&gt;
  &lt;li&gt;슈퍼키 : 유일성은 만족, 최소성은 불만족&lt;/li&gt;
  &lt;li&gt;외래키 : 다른 R의 기본키와 대응되는 참조 관계&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;80-관계형-데이터베이스의-제약조건---무결정&quot;&gt;80 관계형 데이터베이스의 제약조건 - 무결정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;개체 무결성 : 기본키를 구성하는 어떤 속성도 Null값, 중복값을 가지지 않음&lt;/li&gt;
  &lt;li&gt;도메인 무결정 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;속성 값&lt;/code&gt;이 정의된 도메인에 속한 값
    &lt;blockquote&gt;
      &lt;p&gt;(X) 도메인 무결성 규칙은 주어진 튜플의 값이 그 튜플이 정의된 도메인에 속한 값이어야 한다는 것을 규정하는 것이다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;참조 무결정 : 외래키 값은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Null이거나&lt;/code&gt; 참조 R의 기본키 값과 동일해야 한다.&lt;/li&gt;
  &lt;li&gt;사용자 정의 무결성&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;81-관계대수-및-관계해석&quot;&gt;81 관계대수 및 관계해석&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;관계대수 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DB&lt;/code&gt;에서 원하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;정보&lt;/code&gt;와 그 정보를 검색하기 위한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;유도 방법&lt;/code&gt;을 기술하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;절차적인 언어&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;릴레이션을 처리하기 위해 연산자와 연산 규칙을 제공하는 언어&lt;/li&gt;
      &lt;li&gt;피연산자가 릴레이션, 결과도 릴레이션&lt;/li&gt;
      &lt;li&gt;순수 관계 연산자 : Select, Project, Join, Division&lt;/li&gt;
      &lt;li&gt;일반 집합 연산자 : UNION(합집합), INTERSECTION(교집합), DIFFERENCE(차집합), CARTESIAN PRODUCT(교차곱)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Select : Sigma_{조건}(R). 행, 가로, 튜플을 구하는 수평 연산&lt;/li&gt;
  &lt;li&gt;Project : Pi_{속성리스트}(R). 열, 세로, 속성을 구하는 수직 연산&lt;/li&gt;
  &lt;li&gt;Join : R 리본기호_{키속성r=키속성s}S. Cartesian Product 후 Select 수행.&lt;/li&gt;
  &lt;li&gt;Division : R[속성r 나누기 속성s]S. X ⊃ Y인 두 릴레이션 R(X),S(Y)에 대해서, R의 속성이 S의 속성값을 모두 가진 튜플을 구하고, 여기서 S가 가진 속성을 제외한 속성만 구한다.&lt;/li&gt;
  &lt;li&gt;카티션 프로덕트 :
    &lt;ol&gt;
      &lt;li&gt;두 테이블의 차수는 더하고&lt;/li&gt;
      &lt;li&gt;두 테이블의 카디널리티는 곱한다.&lt;/li&gt;
      &lt;li&gt;두 릴레이션의 공통 튜블 수와 관계가 없다. 그저 두 카디널리티를 곱하는 연산이다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;관계해석 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;관계 데이터&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;연산&lt;/code&gt;을 표현하는 방법으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;원하는 정보를 정의&lt;/code&gt;할 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;계산 수식&lt;/code&gt;을 사용함.
    &lt;ol&gt;
      &lt;li&gt;F.Codd가 수학의 Redicate Caculus(술어 해석)에 기반을 두고 DB를 위해 제안.&lt;/li&gt;
      &lt;li&gt;원하는 정보가 무엇이지만 정의하는 비절차적 특성&lt;/li&gt;
      &lt;li&gt;튜플 관계해석과 도메인 관계해석이 있다.&lt;/li&gt;
      &lt;li&gt;RDB를 처리하는 기능과 능력은 관계대수와 같다.&lt;/li&gt;
      &lt;li&gt;관계 대수와 관계해석 각각으로 표현한 식은 서로 호환된다.&lt;/li&gt;
      &lt;li&gt;질의어로 표현한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;82-정규화&quot;&gt;82 정규화&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Anomaly의 종류 : 삽입 이상(원하지 않는 값이 함께 삽입됨), 삭제 이상(원하지 않는 값이 함께 삭제됨), 갱신 이상(일부 튜플의 정보만 갱신되어 정보에 모순이 생김)&lt;/li&gt;
  &lt;li&gt;(X) 데이터의 종속으로 인해 발생하는 이상 현상에는 삭제이상, 삽입이상, 갱신이상이 있다.
    &lt;blockquote&gt;
      &lt;p&gt;이상Anomaly는 데이터의 종속이 아닌 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;속성(필드) 간의 종속&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;데이터의(튜플)의 중복)&lt;/code&gt;으로 인해서 발생한다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;튜플 중에서 일부 속성을 갱신하으로써 정보의 모순성이 발생하는 현상이 갱신 이상이다.&lt;/li&gt;
  &lt;li&gt;정규화 과정 : 도부이결다조 -&amp;gt; 두부이걸다줘?
    &lt;ol&gt;
      &lt;li&gt;도메인이 원자값으로만 구성&lt;/li&gt;
      &lt;li&gt;부분적 함수 종속성 제거(key의 부분집합에 대해서는 FD가 성립하지 않음)&lt;/li&gt;
      &lt;li&gt;이행적 함수 종속성 제거(A-&amp;gt;B &amp;amp; B-&amp;gt;C일 때 A-&amp;gt;C가 만족하지 않음)&lt;/li&gt;
      &lt;li&gt;결정자이면서 후보키가 아닌 것 제거(최소성을 만족하지 못하는 키를 제거)&lt;/li&gt;
      &lt;li&gt;다치 종속 성립&lt;/li&gt;
      &lt;li&gt;조인 종속성이 후보키만을 통해서 성립&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;1NF : 모든 도메인이 원자값으로 구성&lt;/li&gt;
  &lt;li&gt;2NF : 1NF + 모든 속성이 PK에 대해서 완전 함수적 종속을 만족&lt;/li&gt;
  &lt;li&gt;3NF : 2NF + 기본 키가 아닌 모든 속성이 기본키에 대해 이행적 종속을 만족하지 않는다.
    &lt;ol&gt;
      &lt;li&gt;모든 이행 종속을 제거하지 못하는 경우는 정보의 중복에 대한 문제가 존재한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;BCNF : 모든 결정자가 후보키(유일성,최소성)인 정규형이다.
    &lt;ol&gt;
      &lt;li&gt;후보키가 여러개 존재하고 서로 중첩되는 경우에 적용한다.&lt;/li&gt;
      &lt;li&gt;강한 제3정규형&lt;/li&gt;
      &lt;li&gt;복합 속성을 허용한다.&lt;/li&gt;
      &lt;li&gt;키가 아닌 모든 속성은 각 키에 대해서 완전 종속&lt;/li&gt;
      &lt;li&gt;키가 아닌 모든 속성은 자신이 포함되지 않은 모든 키에 대해 완전 종속&lt;/li&gt;
      &lt;li&gt;모든 속성은 키가 아닌 속성에 대해서 완전 종속할 수 없다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;83-반정규환denormalization&quot;&gt;83 반정규환(Denormalization)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;비정규화가 아님&lt;/li&gt;
  &lt;li&gt;성능 향상, 편의성을 위해 정규화된 데이터 모델을 통합,중복,분리하는 과정&lt;/li&gt;
  &lt;li&gt;의도적으로 정규화 원칙을 위배하는 행위&lt;/li&gt;
  &lt;li&gt;성능+단순화 v.s. 일관성+무결성의 상충&lt;/li&gt;
  &lt;li&gt;테이블 통합 : 조인되는 경우 하나의 테이블로 합침(1:1, 1:N, 슈퍼/서브타입 가능. N:M 통합 불가능)&lt;/li&gt;
  &lt;li&gt;수평 테이블 분할 : Record를 기준으로 테이블 분할&lt;/li&gt;
  &lt;li&gt;수직 테이블 분할 : 속성을 기준으로 테이블 분할&lt;/li&gt;
  &lt;li&gt;중복 테이블 추가
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;트리거&lt;/code&gt; : DB 시스템에서 데이터의 입력,갱신,삭제 등의 이벤트가 발생할 때마다 자동적으로 수행되는 절차형 SQL&lt;/li&gt;
      &lt;li&gt;집계 테이블의 추가 : 집계 데이터를 위한 테이블을 생성. 각 원본 테이블에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;트리거&lt;/code&gt;를 설정&lt;/li&gt;
      &lt;li&gt;진행 테이블의 추가 : 변경 전의 속성 값을 저장하기 위한 테이블 추가(이력 관리)&lt;/li&gt;
      &lt;li&gt;처리 범위를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;줄이지 않고는&lt;/code&gt; 수행 속도를 개선할 수 없는 경우에 적용한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;중복 속성 추가 : join을 하지 않고 사용할 수 있도록 자주 사용하는 속성을 하나 더 추가&lt;/li&gt;
  &lt;li&gt;기본키의 유일성 관리가 어려워지는 경우는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;테이블 분할&lt;/code&gt;의 경우이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;84-시스템-카탈로그&quot;&gt;84 시스템 카탈로그&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;= 데이터 사전&lt;/li&gt;
  &lt;li&gt;시스템 그 자체에 관련이 있는 다양한 객체에 관한 정보를 포함하는 시스템 DB&lt;/li&gt;
  &lt;li&gt;시스템 카탈로그에 저장된 정보를 메타 데이터라고 한다.
    &lt;ol&gt;
      &lt;li&gt;데이터베이스 객체 정보(테이블, 인덱스, 뷰)&lt;/li&gt;
      &lt;li&gt;사용자 정보(아이디,패스워드, 접근 권한)&lt;/li&gt;
      &lt;li&gt;테이블의 무결성 제약 조건 정보(기본키, 왜래키, NULL값 허용 여부)&lt;/li&gt;
      &lt;li&gt;함수, 프로시저, 트리거 등에 대한 정보&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;INSERT, DELETE, UPDATE 불가능. DBMS가 스스로 생성하고 유지한다.&lt;/li&gt;
  &lt;li&gt;갱신 : 사용자가 SQL 문을 실행하면 자동으로 갱신된다&lt;/li&gt;
  &lt;li&gt;카탈로그/데이터 사전을 참조하기 위한 DBMS 내의 모듈 시스템
    &lt;ol&gt;
      &lt;li&gt;데이터 정의어 번역기(DDL Compiler) : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DDL&lt;/code&gt;을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;메타 데이터 테이블&lt;/code&gt;로 변환하여 데이터 사전에 저장시킨다.&lt;/li&gt;
      &lt;li&gt;데이터 조작어 번역기(DML Complier) : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;응용 프로그램에 삽입된 DML&lt;/code&gt;문을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;주 언어&lt;/code&gt;로 표현한 프로시저 호출로 변환하여 질의 처리기와 상호 통신한다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data Directory&lt;/code&gt;(데이터 사전이 아님)
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;데이터 사전&lt;/code&gt;에 수록된 데이터에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;접근&lt;/code&gt;하는데 필요한 정보를 관리 유지&lt;/li&gt;
          &lt;li&gt;시스템 카탈로그는 사용자와 시스템 모두 접근 가능&lt;/li&gt;
          &lt;li&gt;테이더 디렉터리는 시스템만 접근 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;질의 최적화기 : 사용자의 요구를 효율적인 형태로 번환&lt;/li&gt;
      &lt;li&gt;트랜잭션 처리기 : 복수 사용자에게서 평행적으로 요청되는 트랜잭션 critical section 문제를 해결&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Niklas Jang</name></author><category term="EIP" /><summary type="html">1장 논리 데이터베이스 설계</summary></entry><entry><title type="html">[AWS] AWS 서비스 간단 설명</title><link href="http://localhost:4000/aws/socket-io/" rel="alternate" type="text/html" title="[AWS] AWS 서비스 간단 설명" /><published>2020-07-28T00:00:00+09:00</published><updated>2020-07-28T00:00:00+09:00</updated><id>http://localhost:4000/aws/socket-io</id><content type="html" xml:base="http://localhost:4000/aws/socket-io/">&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;서비스&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;EC2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Elastic Compute Cloud.&lt;br /&gt; 독립된 컴퓨터를 임대해주는 서비스.&lt;br /&gt;터미널에서 ssh를 통해서 ec2의 IP주소로 접속해서 사용한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;S3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Simple Storage Serivce.&lt;br /&gt; bool,int,string과 같은 간단한 데이터 타입을 지원하는 저장공간이다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;RDS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Relational Database Service.&lt;br /&gt;관계형 데이터베이스를 서비스로서 제공하는 제품이다.&lt;br /&gt;MySQL, MariaDB, PostgreSQL, SQL Server, ORACLE 등을 직접 운영하지 않고 AWS에 대행할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ELB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Elastic Load Balancing.&lt;br /&gt; ELB 인스턴스와 EC2 인스턴스를 연결하면 사용자는 ELB로 요청하고 ELB는 EC2를 번갈아가면서 요청을 전달한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Identitiy &amp;amp; Access Manageent&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aws 계정 접속 시 2단계 인증을 추가할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SMS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;이벤트 발생시 사용자에게 Text Message를 보내준다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SES&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;이벤트 발생시 사용자에게 Email을 보내준다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CloudFront(CDN)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Content Distribution Network.&lt;br /&gt; CDN의 역할을 CDN 포스팅을 참조.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Lambda&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;서버, 서버 위 프로그램 설치 없이 데이터 입력 받고 출력 할 수 있다.&lt;br /&gt; 함수를 작성하고 실행은 AWS 내부 서버가 수행한다. 함수를 작성하고 함수가 언제 실행될지만 정하면 된다.&lt;br /&gt;클라이언트 - API 게이트웨이 - lambda - DB의 구조를 가지기 때문에 API Gateway를 설정하고 클라이언트가 이 주소로 접속할 수 있도록 해야한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Mongo DB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Mongo DB를 통해 AWS와 연동이 가능하다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Niklas Jang</name></author><category term="aws" /></entry><entry><title type="html">[Java] jar, war 차이점</title><link href="http://localhost:4000/java/jar-war/" rel="alternate" type="text/html" title="[Java] jar, war 차이점 " /><published>2020-07-28T00:00:00+09:00</published><updated>2020-07-28T00:00:00+09:00</updated><id>http://localhost:4000/java/jar-war</id><content type="html" xml:base="http://localhost:4000/java/jar-war/">&lt;p&gt;jar와 war 모두 java의 jar 툴을 이용해서 생성도니 압축(아카이브) 파일입니다. 앱을 쉽게 배포하고 동작할 수 있도록 관련 소스들을 패키징 해주는 것이 주 역할입니다.&lt;/p&gt;

&lt;h2 id=&quot;jar-java-archive&quot;&gt;JAR, java Archive&lt;/h2&gt;

&lt;p&gt;maven 등을 통해 내려받은 라이브러리들은 CLASS 파일이 묶인 jar 파일로 구성되어 있습니다.&lt;/p&gt;

&lt;p&gt;class와 같은 java 리소스와 속성 파일, 라이브러리 등의 파일이 포함되어 있습니다. java 앱이 동작할 수 있도록 자바 프로젝트를 압축한 파일이고, 플랫폼에 귀속되는 점만 제외하면 win의 zip과 동일한 구조입니다. 원하는 구조로 구성이 가능하고 JDK 안의 JRE만 있으면 실행할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;war-web-application-archive&quot;&gt;War, Web Application ARchive&lt;/h2&gt;

&lt;p&gt;서비스 배포시에는 WAR 포멧으로 묶어서 /webapps 등의 지정된 경로에 넣고 Tomcat 등의 웹 컨테이너를 이용하여 deploy하는 식으로 서비스를 많이 합니다.&lt;/p&gt;

&lt;p&gt;servlet/jsp 컨테이너에 배치할 수 있는 웹앱 압축 파일 포멧입니다.  JSP, servlet, jar, class, xml, html, javascript 등 servlet context 관련 파일들로 패키징 되어있습니다. WAR는 웹 앱을 위한 포멧이기 때문에 웹 관련 자원만 포함하고 있으며 이를 사용해서 웹 앱을 쉽게 배포할 수 있습니다.&lt;/p&gt;

&lt;p&gt;war 파일도 java의 -jar 옵션을 이용해 생성하는 jar 파일의 일종으로 웹앱 전체를 패키징하기 위한 jar 파일정도로 생각하면 됩니다.&lt;/p&gt;</content><author><name>Niklas Jang</name></author><category term="java" /><category term="jsp" /></entry><entry><title type="html">[Backend] CDN 콘텐츠 분배 네트워크</title><link href="http://localhost:4000/backend/cdn-content-distribution-network/" rel="alternate" type="text/html" title="[Backend] CDN 콘텐츠 분배 네트워크" /><published>2020-07-28T00:00:00+09:00</published><updated>2020-07-28T00:00:00+09:00</updated><id>http://localhost:4000/backend/cdn-content-distribution-network</id><content type="html" xml:base="http://localhost:4000/backend/cdn-content-distribution-network/">&lt;h2 id=&quot;isp-internet-service-provider&quot;&gt;ISP, Internet Service Provider&lt;/h2&gt;

&lt;p&gt;사용자의 입장에서 접속 ISP는 텔코나 케이블 회사일 필요가 없다. 대신 대학교 또는 회사가 ISP가 될 수 있다. 이러한 연결은 종단 시스템이 연결되는 과정에서 극히 일부이고 접속 ISP들이 서로 연결되어야만 한다.&lt;/p&gt;

&lt;p&gt;최초의 ISP 연결은 모든 접속 ISP는 하나의 글로벌 ISP와 연결하는 방법이다. 만약 또 다른 글로벌 ISP 회사가 등장하면 다수의 ISP들이 연결된다. 접속 ISP 입장에서는 글로벌 ISP의 가격과 서비스를 선택할 수 있는 폭이 넓어진다.&lt;/p&gt;

&lt;p&gt;전 세계 모든 도시에 존재하는 ISP는 없다. 대신 주어진 지역에서 그 지역에 있는 접속 ISP들이 연결하는 지역 ISP가 있다. 각 지역 ISP는 1 계층 ISP(글로벌 ISP와 비슷함)들과 연결된다.&lt;/p&gt;

&lt;p&gt;접속 ISP는 지역 ISP에게, 지역 ISP는 1계층 ISP에게 비용을 지불한다. 이 비용을 줄이기 위해서 같은 계층에 있는 가까운 ISP와 peering할 수 있따. 즉, 이들 간에 송수신되는 모든 트래픽을 상위 ISP를 통하지 않고 직접 송수신할 수 있도록 자신들의 네트워크를 서로 직접 연결할 수 있다. peering하는 경우 서로 비용을 지불하지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;ixp-internet-exchange-point&quot;&gt;IXP, Internet Exchange Point&lt;/h2&gt;

&lt;p&gt;다중의 ISP들이 서로 피어링할 수 있는 만남의 장소이다. 일반적으로 교환기를 갖춘 독자적인 건물이다.&lt;/p&gt;

&lt;h2 id=&quot;단일-데이터-센터를-통한-스트리밍-서비스&quot;&gt;단일 데이터 센터를 통한 스트리밍 서비스&lt;/h2&gt;

&lt;p&gt;안정적인 스트리밍 서비스를 제공하기 위한 네트워크이다. 단일한 거대 데이터 센터를 구축하고 모든 비디오 자료를 데이터 센터에 저장한 뒤 전 세계의 사용자에게 비디오 스트림을 데이터 센터로부터 전송하는 방법이 가장 기초적이다. 하지만 이 구조는 3가지 문제점이 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트가 데이터 센터로부터 지역적으로 먼 지점에 있는 경우, 연결된 링크 중 하나라도 비디오 소비율보다 낮은 전송용량을 갖는다면 종단간 처리율이 낮아지고 결국 사용자는 화면 정지 현상을 겪는다.&lt;/li&gt;
  &lt;li&gt;인기 있는 비디오가 같은 통신 링크를 통해 여러번 반복적으로 전송된다. 이는 네트워크 대역폭의 낭비는 물로닝고 ISP에게 동일한 바이트를 전송하는 것에 대한 중복 비용을 지불하게 된다.&lt;/li&gt;
  &lt;li&gt;한 번의 장애가 서비스 전체를 중단시킬 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;따라서 대부분의 스트리밍 서비스는 단일 데이터 센터보다 CDN을 사용한다.&lt;/p&gt;

&lt;h2 id=&quot;cdn&quot;&gt;CDN&lt;/h2&gt;

&lt;p&gt;다수의 지점에 분산된 서버를 운영하며 데이터의 복사본을 이들 분산 서버에 저장한다. 사용자는 가까운 지점의 CDN 서버로 여녈된다. CDN은 컨텐츠 제공자가 소유한 사설 CDN일 수도 있고 제 3자가 운영하는 CDN일 수도 있다.&lt;/p&gt;

&lt;p&gt;CDN을 구축하는 두 가지 철학이 있다. 첫 번째 철학은 전세계에 많은 지점 서버 클러스터를 구축하는 것이다. 서버를 최대한 사용자 가까이에 위치시켜 CDN 서버와 사용자 사이의 링크 및 라우터 수를 줄인다. 속도가 빠르지만 서버 클러스터 관리 비용이 높다. 두 번째 철학은 접속 ISP에 연결하는 대신 CDN들을 일반적으로 접속 ISP들의 클러스터를 IXP에 배치하는 것이다. 지연 시간과 처리율이 상대적으로 나쁘지만 서버 클러스터 유지 관리 비용이 줄어든다.&lt;/p&gt;

&lt;p&gt;서버 클러스터의 위치가 정해지면 CDN은 콘텐츠의 복사본을 이들 클러스터에 저장한다. 각 CDN이 관리하는 지역에서 인기 있는 데이터만 복사해둔다. CDN은 클러스터에 대해서 Push  방식이 아니라 Pull 방식을 사용한다. 어떤 사용자가 지역 클러스터에 없는 비디오를 요청하면 해당 비디오를 중앙 서버나 다른 클러스터로부터 전송받아 사용자에게 서비스하는 동시에 복사본을 만들어 저장한다. 저장 공간이 가득차면 잘 사용되지 않는 비디오는 삭제된다.&lt;/p&gt;

&lt;h2 id=&quot;cdn-동작&quot;&gt;CDN 동작&lt;/h2&gt;

&lt;p&gt;사용자 호스트의 웹 브라우저가 URL을 지정함으로써 특정 비디오의 재생을 요청하면 CDN은 그 요청을 가로채 가장 적당한 CDN을 선택해서 해당 클러스터의 서버로 연결한다. NetCinema라는 콘텐츠 제공자와 KingCDN이라는 CDN 업체 사이의 예를 들어보자. 각 콘텐츠는 http://video.netcinema.com/6Y7B23V라는 URL을 할당받는다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;사용자가 NetCinema 웹 페이지를 방문한다.&lt;/li&gt;
  &lt;li&gt;사용자가 http://video.netcinema.com/6Y7B23V 링크를 클릭하면, 사용자의 호스트는 video.netcinema.com에 대한 DNS Query를 보낸다.&lt;/li&gt;
  &lt;li&gt;사용자의 지역 DNS 서버는 호스트 이름의 video 문자열을 감지하고, 해당 query를 NetCinema의 책임 DNS 서버로 전달한다.&lt;/li&gt;
  &lt;li&gt;NetCinema의 책임 DNS서버는 해당 DNS Query를 KingCDN으로 연결하기 위해 IP 주소 대신에 KingCDN의 호스트이름(a1105.kingcdn.com)을 Local DNS에게 알려준다.&lt;/li&gt;
  &lt;li&gt;이 시점부터 DNS Query는 KingCDN의 사설 DNS 구조로 들어간다. 사용자가 a1105.kingcdn.com에 대한 두 번째 쿼리를 보내면 이는 KingCND의 DNS에 의해 KingCDN 콘텐츠 서버의 IP 주소로 변환되어 LDNS에게 응답된다. 이 때 클라이언트가 콘텐츠를 전송받게 될 서버가 결정된다.&lt;/li&gt;
  &lt;li&gt;클라이언트가 KingCDN의 IP 주소를 얻고나면, 해당 IP 주소로 직접 TCP 연결을 설정하고 비디오에 대한 HTTP Get 요청을 전송한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CDN 입장에서는 클라이언트가 DNS를 이용하는 과정에서 클라이언트의 LDNS 서버의 IP 주소를 알게 된다. 이를 기반으로 최선의 클러스터를 선택한다.&lt;/p&gt;

&lt;h2 id=&quot;넷플릭스&quot;&gt;넷플릭스&lt;/h2&gt;

&lt;p&gt;넷플릭스는 아마존 클라우드(서버,저장소)와 자체 CDN 인프라를 사용한다. 아마존 클라우드에서 처리하는 기능에는 로그인,결제,영화 장르 검색, 영화 추천서비스 등이 포함된다. 좀 더 자세히 보면, 컨텐츠 수집을 할 때는 영화의 스튜디오 마스터 버전을 전달받아서 아마존 클라우드 시스템의 호스트에 업로드한다. 처리할 때는 고객들의 다양한 플레이어 기기 사양에 적합하도록 각 영화의 여러 가지 형식의 비디오를 생성한다. 그리고 각각의 형식별로 다양한 비트레이트를 적용한다. 영화에 대한 다양한 버전이 생성되면 아마존 클라우드 시스템의 호스트는 이들 파일을 CDN에 업로드 한다.&lt;/p&gt;

&lt;p&gt;넷플릭스는 IXP 및 거주용 ISP 자체에 서버 랙을 설치했다. 각각의 랙 서버에는 10Gbps 이더넷 포트와 100테라바이트 이상의 스토리지가 있다. 렉에 있는 서버의 수는 다양하다. 로컬 IXP는 하나의 서버만 가지고 가장 인기 있는 비디오만 포함할 수 있다.&lt;/p&gt;

&lt;p&gt;넷플릭스 CDN의 캐시는 일반적으로 사용하는 pull cache를 사용하고, 사용량이 적은 시간에 비디오를 CDN으로 옮겨 배포한다.&lt;/p&gt;</content><author><name>Niklas Jang</name></author><category term="backend" /><category term="cdn" /></entry><entry><title type="html">[Backend] blocking/non blocking/sync/async socket io</title><link href="http://localhost:4000/backend/blocking-non-blocking-io/" rel="alternate" type="text/html" title="[Backend] blocking/non blocking/sync/async socket io" /><published>2020-07-27T00:00:00+09:00</published><updated>2020-07-27T00:00:00+09:00</updated><id>http://localhost:4000/backend/blocking-non-blocking-io</id><content type="html" xml:base="http://localhost:4000/backend/blocking-non-blocking-io/">&lt;h2 id=&quot;blocking&quot;&gt;Blocking&lt;/h2&gt;

&lt;p&gt;I/O 작업은 유저레벨에서 직접 수행할 수 없다. 실제 I/O를 수행하는것은 커널레벨에서만 가능하다. 따라서 유저 프로세스(또는 쓰레드)는 커널에게 I/O를 요청해야한다. I/O에서 블로킹 형태의 작업은 유저 프로세스가 커널에게 I/O를 요청하는 함수를 호출하고, 커널이 작업을 완료되면 함수가 작업 결과를 반환한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/backend/backend-8.jpg&quot; alt=&quot;backend-8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;만약 여러 클라이언트가 접속하는 서버를 블로킹방식으로 구현한다고 가정해보자. I/O작업이 blocking 방식으로 구현되면 하나의 클라이언트가 I/O작업을 진행하면 해당 프로세스(또는 쓰레드)가 진행하는 작업을 중지하게 된다. 따라서 다른 클라이언트의 작업에 영향을 미치지 않게 하기 위해서 클라이언트 별로 별도의 쓰레드를 만들어 연결시켜주어야 할 것이다. 그러면 쓰레드 수는 접속자 수가 많아질 수록 엄청나게 많아지게 된다. 쓰레드가 많으면 CPU의 컨텍스트 스위칭 횟수가 증가할 것이며, 이때 사용되는 컨텍스트 스위칭 비용 때문에, 실제 작업하는 양에 비하여 훨씬 비효율적으로 동작하게 될 것이다.&lt;/p&gt;

&lt;h2 id=&quot;non-blocking&quot;&gt;Non-Blocking&lt;/h2&gt;

&lt;p&gt;Blocking 방식의 비효율성을 극복하고자 만들어진 것이 Non-Blocking 방식이다. Non-Blocking은 I/O작업을 진행하는 동안 유저 프로세스의 작업을 중단시키지 않는다. 유저 프로세스가 커널에게 I/O를 요청하는 함수를 호출하면, 함수는 I/O를 요청한 다음 진행상황과 상관없이 바로 결과를 반환한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/backend/backend-9.jpg&quot; alt=&quot;backend-9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림은 Non-Blocking 방식으로 구현된 I/O의 대표적인 사례를 잘 보여준다. 유저 프로세스는 recvfrom함수를 호출하여 커널에게 해당 소켓으로부터 데이터를 받아오고 싶다고 요청하고 있다. 커널은 이 요청에 대해서 상대방의 데이터를 전송 받아서 recvBuffer에 저장하고, 유저에게 그 내용을 복사해줘야 한다. 상대방으로 부터 데이터를 받는 중에 recvBuffer가 비어있다면 유저 프로세스가 커널에게 받아올 수 있는 정보는 없다. 따라서 recvfrom 함수는 아직 작업 진행중이란 의미로 “EWOULDBLOCK”을 리턴한다. 이 결과를 받은 유저 프로세스는 다른 작업을 진행할 수 있다. 만약 recvBuffer에 유저가 받을 수 있는 데이터가 있다면, 버퍼로 부터 데이터를 복사하여 받아온다. recvBuffer는 커널이 가지고 있는 메모리에 적재되어 있으므로 메모리간 복사가 일어나 I/O보다 훨씬 빠른 속도로 데이터를 받아올 수 있다. 이때 recvfrom함수는 빠른 속도로 읽을 수 있는 데이터를 복사해주고 복사한 데이터의 길이와 함께 반환한다. 위의 모든 반환이 I/O의 진행시간과는 관계없이 빠르게 동작하기 때문에, 유저 프로세스는 자신의 작업을 오랜시간 중지하지 않고도 I/O 처리를 수행할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;socket에서-non-blocking-구현&quot;&gt;Socket에서 Non-Blocking 구현&lt;/h2&gt;

&lt;h2 id=&quot;통지모델&quot;&gt;통지모델&lt;/h2&gt;

&lt;p&gt;동기(synchronous)와 비동기(asynchronous)는 서로 메시지를 주고받는 상대방이 어떤 방식으로 통신을 하는가에 대한 개념이다. I/O 통지모델에서 대화하는 주체들은 커널과 프로세스이다. 프로세스는 커널에게 I/O처리를 요청하고,커널은 프로세스에게 I/O 상황을 통지한다. 우선 I/O 요청은 반드시 동일하게 처리될 수 밖에 없는 부분이고, 결국에 커널이 프로세스에게 어떤 방식으로 통지하느냐에 따라 동기형이냐 비동기형이 결정될 것이다.&lt;/p&gt;

&lt;h3 id=&quot;동기형-통지모델&quot;&gt;동기형 통지모델&lt;/h3&gt;

&lt;p&gt;동기형 통지모델의 프로세스는 커널에게 지속적으로 현재 I/O 준비 상황을 체크한다. 즉 커널이 준비되었는지를 계속 확인하여 동기화 하는 것이다. 따라서 동기형 통지모델에서 Notify를 적극적으로 진행하는 주체는 유저의 프로세스가 되며 커널은 수동적으로 유저 프로세스의 요청에 따라 현재의 상황을 보고한다.&lt;/p&gt;

&lt;p&gt;select와 epoll 모두 프로세스가 커널에게 지속적으로 I/O 상황을 체크하여 동기화 하는 개념은 여전히 유효하기 때문에 동기형 통지모델이다. (blocking/non-blocking은 timeout에 의해서 결정되는 부분이다.)&lt;/p&gt;

&lt;h3 id=&quot;비동기형-통지모델&quot;&gt;비동기형 통지모델&lt;/h3&gt;

&lt;p&gt;이와 반대로 비동기형 통지모델은 일단 커널에게 I/O작업을 맡기면 커널의 작업 진행사항에 대해서 프로세스가 인지할 필요가 없는 상황을 말한다. 유저의 프로세스가 I/O 동기화를 신경쓸 필요가 없기에 비동기형이라고 부를 수 있다. 따라서 비동기형 통지모델에서 Notify의 적극적인 주체는 커널이 되며, 유저 프로세스는 수동적인 입장에서 자신이 할일을 하다가 통지가 오면 그때 I/O 처리를 하게 된다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ozt88.tistory.com/20&quot;&gt;https://ozt88.tistory.com/20&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Niklas Jang</name></author><category term="backend" /><category term="socket" /><category term="io" /></entry><entry><title type="html">[Backend] socket io 구조</title><link href="http://localhost:4000/backend/socket-io/" rel="alternate" type="text/html" title="[Backend] socket io 구조" /><published>2020-07-27T00:00:00+09:00</published><updated>2020-07-27T00:00:00+09:00</updated><id>http://localhost:4000/backend/socket-io</id><content type="html" xml:base="http://localhost:4000/backend/socket-io/">&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;event&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;의미&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;O_NONBLOCK&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;논 블럭킹 방식으로 데이터 전송하고자 할 때 적용하는 소켓의 attribute ( fcntl() 함수 사용)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;EAGAIN&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;버퍼가 꽉 차서 더 이상 전송이 불가능 할 경우에 발생하는 에러코드&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Niklas Jang</name></author><category term="backend" /><category term="socket" /><category term="io" /></entry></feed>